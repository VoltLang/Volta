// Copyright Â© 2016-2017, Jakob Bornecrantz.  All rights reserved.
// See copyright notice in src/watt/license.volt (BOOST ver. 1.0).
/*!
 * @ingroup cbind
 * @ingroup winbind
 */
module core.c.windows.winhttp;

version(Windows):

import core.c.windows;


extern(Windows):

alias HINTERNET = void*;
alias LPHINTERNET = HINTERNET*;
alias INTERNET_PORT = WORD;
alias LPINTERNET_PORT = INTERNET_PORT*;
alias INTERNET_SCHEME = i32;
alias LPINTERNET_SCHEME = INTERNET_SCHEME*;

enum : DWORD {
	INTERNET_DEFAULT_PORT       = 0,
	INTERNET_DEFAULT_HTTP_PORT  = 80,
	INTERNET_DEFAULT_HTTPS_PORT = 443
}

enum DWORD WINHTTP_FLAG_ASYNC = 0x10000000;

struct WINHTTP_ASYNC_RESULT {
	dwResult: DWORD_PTR;
	dwError: DWORD;
}

enum : DWORD {
	WINHTTP_FLAG_SECURE               = 0x00800000,
	WINHTTP_FLAG_ESCAPE_PERCENT       = 0x00000004,
	WINHTTP_FLAG_NULL_CODEPAGE        = 0x00000008,
	WINHTTP_FLAG_BYPASS_PROXY_CACHE   = 0x00000100,
	WINHTTP_FLAG_REFRESH              = 0x00000100,
	WINHTTP_FLAG_ESCAPE_DISABLE       = 0x00000040,
	WINHTTP_FLAG_ESCAPE_DISABLE_QUERY = 0x00000080,

	SECURITY_FLAG_IGNORE_UNKNOWN_CA        = 0x00000100,
	SECURITY_FLAG_IGNORE_CERT_DATE_INVALID = 0x00002000,
	SECURITY_FLAG_IGNORE_CERT_CN_INVALID   = 0x00001000,
	SECURITY_FLAG_IGNORE_CERT_WRONG_USAGE  = 0x00000200
}

enum : DWORD {
	WINHTTP_QUERY_MIME_VERSION               = 0,
	WINHTTP_QUERY_CONTENT_TYPE               = 1,
	WINHTTP_QUERY_CONTENT_TRANSFER_ENCODING  = 2,
	WINHTTP_QUERY_CONTENT_ID                 = 3,
	WINHTTP_QUERY_CONTENT_DESCRIPTION        = 4,
	WINHTTP_QUERY_CONTENT_LENGTH             = 5,
	WINHTTP_QUERY_CONTENT_LANGUAGE           = 6,
	WINHTTP_QUERY_ALLOW                      = 7,
	WINHTTP_QUERY_PUBLIC                     = 8,
	WINHTTP_QUERY_DATE                       = 9,
	WINHTTP_QUERY_EXPIRES                    = 10,
	WINHTTP_QUERY_LAST_MODIFIED              = 11,
	WINHTTP_QUERY_MESSAGE_ID                 = 12,
	WINHTTP_QUERY_URI                        = 13,
	WINHTTP_QUERY_DERIVED_FROM               = 14,
	WINHTTP_QUERY_COST                       = 15,
	WINHTTP_QUERY_LINK                       = 16,
	WINHTTP_QUERY_PRAGMA                     = 17,
	WINHTTP_QUERY_VERSION                    = 18,
	WINHTTP_QUERY_STATUS_CODE                = 19,
	WINHTTP_QUERY_STATUS_TEXT                = 20,
	WINHTTP_QUERY_RAW_HEADERS                = 21,
	WINHTTP_QUERY_RAW_HEADERS_CRLF           = 22,
	WINHTTP_QUERY_CONNECTION                 = 23,
	WINHTTP_QUERY_ACCEPT                     = 24,
	WINHTTP_QUERY_ACCEPT_CHARSET             = 25,
	WINHTTP_QUERY_ACCEPT_ENCODING            = 26,
	WINHTTP_QUERY_ACCEPT_LANGUAGE            = 27,
	WINHTTP_QUERY_AUTHORIZATION              = 28,
	WINHTTP_QUERY_CONTENT_ENCODING           = 29,
	WINHTTP_QUERY_FORWARDED                  = 30,
	WINHTTP_QUERY_FROM                       = 31,
	WINHTTP_QUERY_IF_MODIFIED_SINCE          = 32,
	WINHTTP_QUERY_LOCATION                   = 33,
	WINHTTP_QUERY_ORIG_URI                   = 34,
	WINHTTP_QUERY_REFERER                    = 35,
	WINHTTP_QUERY_RETRY_AFTER                = 36,
	WINHTTP_QUERY_SERVER                     = 37,
	WINHTTP_QUERY_TITLE                      = 38,
	WINHTTP_QUERY_USER_AGENT                 = 39,
	WINHTTP_QUERY_WWW_AUTHENTICATE           = 40,
	WINHTTP_QUERY_PROXY_AUTHENTICATE         = 41,
	WINHTTP_QUERY_ACCEPT_RANGES              = 42,
	WINHTTP_QUERY_SET_COOKIE                 = 43,
	WINHTTP_QUERY_COOKIE                     = 44,
	WINHTTP_QUERY_REQUEST_METHOD             = 45,
	WINHTTP_QUERY_REFRESH                    = 46,
	WINHTTP_QUERY_CONTENT_DISPOSITION        = 47,

	// HTTP 1.1 defined headers

	WINHTTP_QUERY_AGE                        = 48,
	WINHTTP_QUERY_CACHE_CONTROL              = 49,
	WINHTTP_QUERY_CONTENT_BASE               = 50,
	WINHTTP_QUERY_CONTENT_LOCATION           = 51,
	WINHTTP_QUERY_CONTENT_MD5                = 52,
	WINHTTP_QUERY_CONTENT_RANGE              = 53,
	WINHTTP_QUERY_ETAG                       = 54,
	WINHTTP_QUERY_HOST                       = 55,
	WINHTTP_QUERY_IF_MATCH                   = 56,
	WINHTTP_QUERY_IF_NONE_MATCH              = 57,
	WINHTTP_QUERY_IF_RANGE                   = 58,
	WINHTTP_QUERY_IF_UNMODIFIED_SINCE        = 59,
	WINHTTP_QUERY_MAX_FORWARDS               = 60,
	WINHTTP_QUERY_PROXY_AUTHORIZATION        = 61,
	WINHTTP_QUERY_RANGE                      = 62,
	WINHTTP_QUERY_TRANSFER_ENCODING          = 63,
	WINHTTP_QUERY_UPGRADE                    = 64,
	WINHTTP_QUERY_VARY                       = 65,
	WINHTTP_QUERY_VIA                        = 66,
	WINHTTP_QUERY_WARNING                    = 67,
	WINHTTP_QUERY_EXPECT                     = 68,
	WINHTTP_QUERY_PROXY_CONNECTION           = 69,
	WINHTTP_QUERY_UNLESS_MODIFIED_SINCE      = 70,

	WINHTTP_QUERY_PROXY_SUPPORT              = 75,
	WINHTTP_QUERY_AUTHENTICATION_INFO        = 76,
	WINHTTP_QUERY_PASSPORT_URLS              = 77,
	WINHTTP_QUERY_PASSPORT_CONFIG            = 78,

	WINHTTP_QUERY_MAX                        = 78,

	WINHTTP_QUERY_CUSTOM                     = 65535,

//	WINHTTP_QUERY_FLAG_REQUEST_HEADERS         = 0x80000000,

	WINHTTP_QUERY_FLAG_SYSTEMTIME              = 0x40000000,

	WINHTTP_QUERY_FLAG_NUMBER                  = 0x20000000
}

enum : DWORD {
	WINHTTP_ACCESS_TYPE_DEFAULT_PROXY             = 0,
	WINHTTP_ACCESS_TYPE_NO_PROXY                  = 1,
	WINHTTP_ACCESS_TYPE_NAMED_PROXY               = 3,
	WINHTTP_ACCESS_TYPE_AUTOMATIC_PROXY           = 4
}

enum LPCWSTR WINHTTP_NO_PROXY_NAME         = null;
enum LPCWSTR WINHTTP_NO_PROXY_BYPASS       = null;

enum LPCWSTR WINHTTP_NO_REFERER             = null;
enum LPCWSTR * WINHTTP_DEFAULT_ACCEPT_TYPES = null;

enum LPCWSTR WINHTTP_NO_ADDITIONAL_HEADERS = null;
enum LPVOID WINHTTP_NO_REQUEST_DATA        = null;

enum LPCWSTR WINHTTP_HEADER_NAME_BY_INDEX  = null;
enum LPVOID WINHTTP_NO_OUTPUT_BUFFER       = null;
enum LPDWORD WINHTTP_NO_HEADER_INDEX       = null;

enum : DWORD {
	WINHTTP_CALLBACK_STATUS_RESOLVING_NAME          = 0x00000001,
	WINHTTP_CALLBACK_STATUS_NAME_RESOLVED           = 0x00000002,
	WINHTTP_CALLBACK_STATUS_CONNECTING_TO_SERVER    = 0x00000004,
	WINHTTP_CALLBACK_STATUS_CONNECTED_TO_SERVER     = 0x00000008,
	WINHTTP_CALLBACK_STATUS_SENDING_REQUEST         = 0x00000010,
	WINHTTP_CALLBACK_STATUS_REQUEST_SENT            = 0x00000020,
	WINHTTP_CALLBACK_STATUS_RECEIVING_RESPONSE      = 0x00000040,
	WINHTTP_CALLBACK_STATUS_RESPONSE_RECEIVED       = 0x00000080,
	WINHTTP_CALLBACK_STATUS_CLOSING_CONNECTION      = 0x00000100,
	WINHTTP_CALLBACK_STATUS_CONNECTION_CLOSED       = 0x00000200,
	WINHTTP_CALLBACK_STATUS_HANDLE_CREATED          = 0x00000400,
	WINHTTP_CALLBACK_STATUS_HANDLE_CLOSING          = 0x00000800,
	WINHTTP_CALLBACK_STATUS_DETECTING_PROXY         = 0x00001000,
	WINHTTP_CALLBACK_STATUS_REDIRECT                = 0x00004000,
	WINHTTP_CALLBACK_STATUS_INTERMEDIATE_RESPONSE   = 0x00008000,
	WINHTTP_CALLBACK_STATUS_SECURE_FAILURE          = 0x00010000,
	WINHTTP_CALLBACK_STATUS_HEADERS_AVAILABLE       = 0x00020000,
	WINHTTP_CALLBACK_STATUS_DATA_AVAILABLE          = 0x00040000,
	WINHTTP_CALLBACK_STATUS_READ_COMPLETE           = 0x00080000,
	WINHTTP_CALLBACK_STATUS_WRITE_COMPLETE          = 0x00100000,
	WINHTTP_CALLBACK_STATUS_REQUEST_ERROR           = 0x00200000,
	WINHTTP_CALLBACK_STATUS_SENDREQUEST_COMPLETE    = 0x00400000
}

enum : DWORD {
	WINHTTP_CALLBACK_STATUS_GETPROXYFORURL_COMPLETE = 0x01000000,
	WINHTTP_CALLBACK_STATUS_CLOSE_COMPLETE          = 0x02000000,
	WINHTTP_CALLBACK_STATUS_SHUTDOWN_COMPLETE       = 0x04000000
}

// Hack
global DWORD WINHTTP_CALLBACK_FLAG_ALL_NOTIFICATIONS = cast(DWORD)0xffffffff;

alias WINHTTP_STATUS_CALLBACK = fn!Windows(
	hInternet: HINTERNET,
	dwContext: DWORD_PTR,
	dwInternetStatus: DWORD,
	lpvStatusInformation: LPVOID,
	dwStatusInformationLength: DWORD
);

fn WinHttpCheckPlatform() BOOL;

fn WinHttpConnect(
	hSession: HINTERNET, pswzServerName: LPCWSTR, nServerPort: INTERNET_PORT,
	dwReserved: DWORD) HINTERNET;

fn WinHttpAddRequestHeaders(
	hRequest: HINTERNET, pwszHeaders: LPCWSTR, dwHeadersLength: DWORD,
	dwModifiers: DWORD) BOOL;

fn WinHttpCloseHandle(hInternet: HINTERNET) BOOL;

fn WinHttpOpen(
	pwszUserAgent: LPCWSTR, dwAccessType: DWORD, pwszProxyName: LPCWSTR,
	pwszProxyBypass: LPCWSTR, dwFlags: DWORD) HINTERNET;

fn WinHttpOpenRequest(
	hConnect: HINTERNET, pwszVerb: LPCWSTR, pwszObjectName: LPCWSTR,
	pwszVersion: LPCWSTR, pwszReferrer: LPCWSTR, ppwszAcceptTypes: LPCWSTR*,
	dwFlags: DWORD) HINTERNET;

fn WinHttpQueryDataAvailable(
	hRequest: HINTERNET, lpdwNumberOfBytesAvailable: LPDWORD) BOOL;

fn WinHttpReadData(
	hRequest: HINTERNET, lpBuffer: LPVOID, dwNumberOfBytesToRead: DWORD,
	lpdwNumberOfBytesRead: LPDWORD) BOOL;

fn WinHttpReceiveResponse(hRequest: HINTERNET, lpReserved: LPVOID) BOOL;

fn WinHttpSendRequest(hRequest: HINTERNET, pwszHeaders: LPCWSTR,
	dwHeadersLength: DWORD, lpOptional: LPVOID, dwOptionalLength: DWORD,
	dwTotalLength: DWORD, dwContext: DWORD_PTR) BOOL;

fn WinHttpSetStatusCallback(
	hInternet: HINTERNET, lpfnInternetCallback: WINHTTP_STATUS_CALLBACK,
	dwNotificationFlags: DWORD, dwReserved: DWORD_PTR) WINHTTP_STATUS_CALLBACK;

enum DWORD WINHTTP_OPTION_SECURE_PROTOCOLS     = 84;
enum DWORD WINHTTP_FLAG_SECURE_PROTOCOL_SSL2   = 0x00000008;
enum DWORD WINHTTP_FLAG_SECURE_PROTOCOL_SSL3   = 0x00000020;
enum DWORD WINHTTP_FLAG_SECURE_PROTOCOL_TLS1   = 0x00000080;
enum DWORD WINHTTP_FLAG_SECURE_PROTOCOL_TLS1_1 = 0x00000200;
enum DWORD WINHTTP_FLAG_SECURE_PROTOCOL_TLS1_2 = 0x00000800;
enum DWORD WINHTTP_FLAG_SECURE_PROTOCOL_ALL = WINHTTP_FLAG_SECURE_PROTOCOL_SSL2 |
	WINHTTP_FLAG_SECURE_PROTOCOL_SSL3 | WINHTTP_FLAG_SECURE_PROTOCOL_TLS1;

enum DWORD WINHTTP_CALLBACK_STATUS_FLAG_CERT_REV_FAILED         = 0x00000001;
enum DWORD WINHTTP_CALLBACK_STATUS_FLAG_INVALID_CERT            = 0x00000002;
enum DWORD WINHTTP_CALLBACK_STATUS_FLAG_CERT_REVOKED            = 0x00000004;
enum DWORD WINHTTP_CALLBACK_STATUS_FLAG_INVALID_CA              = 0x00000008;
enum DWORD WINHTTP_CALLBACK_STATUS_FLAG_CERT_CN_INVALID         = 0x00000010;
enum DWORD WINHTTP_CALLBACK_STATUS_FLAG_CERT_DATE_INVALID       = 0x00000020;
enum DWORD WINHTTP_CALLBACK_STATUS_FLAG_CERT_WRONG_USAGE        = 0x00000040;
enum DWORD WINHTTP_CALLBACK_STATUS_FLAG_SECURITY_CHANNEL_ERROR  = 0x80000000;

fn WinHttpSetOption(
	hInternet: HINTERNET, dwOption: DWORD, lpBuffer: LPVOID, dwBufferLength: DWORD) BOOL;

fn WinHttpQueryHeaders(
	hRequest: HINTERNET, dwInfoLevel: DWORD, pwszName: LPCWSTR,
	lpBuffer: LPVOID, lpdwBufferLength: LPDWORD, lpdwIndex: LPDWORD) BOOL;
