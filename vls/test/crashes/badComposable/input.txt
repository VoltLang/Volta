Content-Length: 1154

{"jsonrpc":"2.0","id":0,"method":"initialize","params":{"processId":7889,"rootPath":null,"rootUri":null,"capabilities":{"workspace":{"applyEdit":true,"didChangeConfiguration":{"dynamicRegistration":true},"didChangeWatchedFiles":{"dynamicRegistration":true},"symbol":{"dynamicRegistration":true},"executeCommand":{"dynamicRegistration":true}},"textDocument":{"synchronization":{"dynamicRegistration":true,"willSave":true,"willSaveWaitUntil":true,"didSave":true},"completion":{"dynamicRegistration":true,"completionItem":{"snippetSupport":true,"commitCharactersSupport":true}},"hover":{"dynamicRegistration":true},"signatureHelp":{"dynamicRegistration":true},"definition":{"dynamicRegistration":true},"references":{"dynamicRegistration":true},"documentHighlight":{"dynamicRegistration":true},"documentSymbol":{"dynamicRegistration":true},"codeAction":{"dynamicRegistration":true},"codeLens":{"dynamicRegistration":true},"formatting":{"dynamicRegistration":true},"rangeFormatting":{"dynamicRegistration":true},"onTypeFormatting":{"dynamicRegistration":true},"rename":{"dynamicRegistration":true},"documentLink":{"dynamicRegistration":true}}},"trace":"off"}}Content-Length: 52

{"jsonrpc":"2.0","method":"initialized","params":{}}Content-Length: 186

{"jsonrpc":"2.0","method":"workspace/didChangeConfiguration","params":{"settings":{"volt":{"pathToVolta":"/Users/bernard/Code/volt/Volta","pathToWatt":"/Users/bernard/Code/volt/Watt"}}}}Content-Length: 4028

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/bernard/Code/volt/Volta/vls/src/vls/server/symbolGathererVisitor.volt","version":5},"contentChanges":[{"text":"module vls.server.symbolGathererVisitor;\n\nimport watt.text.sink;\n\nimport ir = volta.ir;\n\nimport volta.visitor.visitor;\nimport volta.ir.location;\n\nimport vls.lsp.constants;\n\nstruct Symbol\n{\n\tname: string;\n\tloc: Location;\n\ttype: i32;  //< See the SYMBOL_ enums in vls.lsp.constants.\n\tcontainerName: string;\n\n\tfn jsonString(uri: string) string\n\t{\n\t\tss: StringSink;\n\t\tss.sink(new \"{\\\"name\\\":\\\"${name}\\\",\\\"kind\\\":${type},\\\"location\\\":${locationToJsonString(loc, uri)}\";\n\t\tif (containerName.length > 0) {\n\t\t\tmsg ~= new \", \\\"containerName\\\":\\\"${containerName}\\\"\";\n\t\t}\n\t\tmsg ~= \"}\";\n\t\treturn msg; \n\t}\n}\n\nfn locationToJsonString(loc: Location, uri: string) string\n{\n\treturn new \"{\\\"uri\\\":\\\"${uri}\\\",\\\"range\\\":${locationToRange(loc)}}\";\n}\n\nfn locationToRange(loc: Location) string\n{\n\tendLoc := loc;\n\tendLoc.column += loc.length;\n\treturn new \"{\\\"start\\\":${locationToPosition(loc)},\\\"end\\\":${locationToPosition(endLoc)}}\";\n}\n\nfn locationToPosition(loc: Location) string\n{\n\treturn new \"{\\\"line\\\":${loc.line - 1},\\\"character\\\":${loc.column - 1}}\";\n}\n\nclass SymbolGathererVisitor : NullVisitor\n{\npublic:\n\tsymbols: Symbol[];\n\nprivate:\n\tparents: string[];\n\npublic:\n\toverride fn enter(mod: ir.Module) Status\n\t{\n\t\taddSymbol(mod, mod.name.toString(), SYMBOL_MODULE);\n\t\treturn Status.Continue;\n\t}\n\n\toverride fn enter(func: ir.Function) Status\n\t{\n\t\tkind: i32;\n\t\tname := func.name;\n\t\tswitch (func.kind) with (ir.Function.Kind) {\n\t\tcase Member:\n\t\t\tkind = SYMBOL_METHOD;\n\t\t\tbreak;\n\t\tcase Constructor:\n\t\t\tkind = SYMBOL_CONSTRUCTOR;\n\t\t\tname = \"this\";\n\t\t\tbreak;\n\t\tcase Destructor:\n\t\t\tname = \"~this\";\n\t\t\tkind = SYMBOL_FUNCTION;\n\t\t\tbreak;\n\t\tdefault:\n\t\t\tif (func.type.isProperty) {\n\t\t\t\tkind = SYMBOL_PROPERTY;\n\t\t\t} else {\n\t\t\t\tkind = SYMBOL_FUNCTION;\n\t\t\t}\n\t\t\tbreak;\n\t\t}\n\t\taddSymbol(func, name, kind);\n\t\treturn Status.Continue;\n\t}\n\n\toverride fn enter(strct: ir.Struct) Status\n\t{\n\t\taddSymbol(strct, strct.name, SYMBOL_CLASS);\n\t\tparents ~= strct.name;\n\t\treturn Status.Continue;\n\t}\n\n\toverride fn leave(strct: ir.Struct) Status\n\t{\n\t\tassert(parents.length > 0);\n\t\tparents = parents[0 .. $-1];\n\t\treturn Status.Continue;\n\t}\n\n\toverride fn enter(clss: ir.Class) Status\n\t{\n\t\taddSymbol(clss, clss.name, SYMBOL_CLASS);\n\t\tparents ~= clss.name;\n\t\treturn Status.Continue;\n\t}\n\n\toverride fn leave(clss: ir.Class) Status\n\t{\n\t\tassert(parents.length > 0);\n\t\tparents = parents[0 .. $-1];\n\t\treturn Status.Continue;\n\t}\n\n\toverride fn enter(intrfc: ir._Interface) Status\n\t{\n\t\taddSymbol(intrfc, intrfc.name, SYMBOL_INTERFACE);\n\t\tparents ~= intrfc.name;\n\t\treturn Status.Continue;\n\t}\n\n\toverride fn leave(intrfc: ir._Interface) Status\n\t{\n\t\tassert(parents.length > 0);\n\t\tparents = parents[0 .. $-1];\n\t\treturn Status.Continue;\n\t}\n\n\toverride fn enter(var: ir.Variable) Status\n\t{\n\t\tkind: i32;\n\t\tswitch (var.storage) with (ir.Variable.Storage) {\n\t\tcase Field:\n\t\t\tkind = SYMBOL_FIELD;\n\t\t\tbreak;\n\t\tcase Global:\n\t\tcase Local:\n\t\t\tkind = SYMBOL_VARIABLE;\n\t\t\tbreak;\n\t\tdefault:\n\t\t\treturn Status.Continue;\n\t\t}\n\t\taddSymbol(var, var.name, kind);\n\t\treturn Status.Continue;\n\t}\n\n\toverride fn enter(enm: ir.EnumDeclaration) Status\n\t{\n\t\taddSymbol(enm, enm.name, SYMBOL_ENUM);\n\t\treturn Status.Continue;\n\t}\n\nprivate:\n\tfn addSymbol(node: ir.Node, name: string, type: i32)\n\t{\n\t\tsym: Symbol;\n\t\tsym.name = name;\n\t\tif (parents.length > 0) {\n\t\t\tsym.containerName = parents[$-1];\n\t\t}\n\t\tsym.loc = node.loc;\n\t\tsym.type = type;\n\t\tsymbols ~= sym;\n\t}\n}\n"}]}}Content-Length: 186

{"jsonrpc":"2.0","method":"workspace/didChangeWatchedFiles","params":{"changes":[{"uri":"file:///Users/bernard/Code/volt/Volta/vls/src/vls/server/symbolGathererVisitor.volt","type":2}]}}Content-Length: 4027

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/bernard/Code/volt/Volta/vls/src/vls/server/symbolGathererVisitor.volt","version":6},"contentChanges":[{"text":"module vls.server.symbolGathererVisitor;\n\nimport watt.text.sink;\n\nimport ir = volta.ir;\n\nimport volta.visitor.visitor;\nimport volta.ir.location;\n\nimport vls.lsp.constants;\n\nstruct Symbol\n{\n\tname: string;\n\tloc: Location;\n\ttype: i32;  //< See the SYMBOL_ enums in vls.lsp.constants.\n\tcontainerName: string;\n\n\tfn jsonString(uri: string) string\n\t{\n\t\tss: StringSink;\n\t\tss.sinknew \"{\\\"name\\\":\\\"${name}\\\",\\\"kind\\\":${type},\\\"location\\\":${locationToJsonString(loc, uri)}\";\n\t\tif (containerName.length > 0) {\n\t\t\tmsg ~= new \", \\\"containerName\\\":\\\"${containerName}\\\"\";\n\t\t}\n\t\tmsg ~= \"}\";\n\t\treturn msg; \n\t}\n}\n\nfn locationToJsonString(loc: Location, uri: string) string\n{\n\treturn new \"{\\\"uri\\\":\\\"${uri}\\\",\\\"range\\\":${locationToRange(loc)}}\";\n}\n\nfn locationToRange(loc: Location) string\n{\n\tendLoc := loc;\n\tendLoc.column += loc.length;\n\treturn new \"{\\\"start\\\":${locationToPosition(loc)},\\\"end\\\":${locationToPosition(endLoc)}}\";\n}\n\nfn locationToPosition(loc: Location) string\n{\n\treturn new \"{\\\"line\\\":${loc.line - 1},\\\"character\\\":${loc.column - 1}}\";\n}\n\nclass SymbolGathererVisitor : NullVisitor\n{\npublic:\n\tsymbols: Symbol[];\n\nprivate:\n\tparents: string[];\n\npublic:\n\toverride fn enter(mod: ir.Module) Status\n\t{\n\t\taddSymbol(mod, mod.name.toString(), SYMBOL_MODULE);\n\t\treturn Status.Continue;\n\t}\n\n\toverride fn enter(func: ir.Function) Status\n\t{\n\t\tkind: i32;\n\t\tname := func.name;\n\t\tswitch (func.kind) with (ir.Function.Kind) {\n\t\tcase Member:\n\t\t\tkind = SYMBOL_METHOD;\n\t\t\tbreak;\n\t\tcase Constructor:\n\t\t\tkind = SYMBOL_CONSTRUCTOR;\n\t\t\tname = \"this\";\n\t\t\tbreak;\n\t\tcase Destructor:\n\t\t\tname = \"~this\";\n\t\t\tkind = SYMBOL_FUNCTION;\n\t\t\tbreak;\n\t\tdefault:\n\t\t\tif (func.type.isProperty) {\n\t\t\t\tkind = SYMBOL_PROPERTY;\n\t\t\t} else {\n\t\t\t\tkind = SYMBOL_FUNCTION;\n\t\t\t}\n\t\t\tbreak;\n\t\t}\n\t\taddSymbol(func, name, kind);\n\t\treturn Status.Continue;\n\t}\n\n\toverride fn enter(strct: ir.Struct) Status\n\t{\n\t\taddSymbol(strct, strct.name, SYMBOL_CLASS);\n\t\tparents ~= strct.name;\n\t\treturn Status.Continue;\n\t}\n\n\toverride fn leave(strct: ir.Struct) Status\n\t{\n\t\tassert(parents.length > 0);\n\t\tparents = parents[0 .. $-1];\n\t\treturn Status.Continue;\n\t}\n\n\toverride fn enter(clss: ir.Class) Status\n\t{\n\t\taddSymbol(clss, clss.name, SYMBOL_CLASS);\n\t\tparents ~= clss.name;\n\t\treturn Status.Continue;\n\t}\n\n\toverride fn leave(clss: ir.Class) Status\n\t{\n\t\tassert(parents.length > 0);\n\t\tparents = parents[0 .. $-1];\n\t\treturn Status.Continue;\n\t}\n\n\toverride fn enter(intrfc: ir._Interface) Status\n\t{\n\t\taddSymbol(intrfc, intrfc.name, SYMBOL_INTERFACE);\n\t\tparents ~= intrfc.name;\n\t\treturn Status.Continue;\n\t}\n\n\toverride fn leave(intrfc: ir._Interface) Status\n\t{\n\t\tassert(parents.length > 0);\n\t\tparents = parents[0 .. $-1];\n\t\treturn Status.Continue;\n\t}\n\n\toverride fn enter(var: ir.Variable) Status\n\t{\n\t\tkind: i32;\n\t\tswitch (var.storage) with (ir.Variable.Storage) {\n\t\tcase Field:\n\t\t\tkind = SYMBOL_FIELD;\n\t\t\tbreak;\n\t\tcase Global:\n\t\tcase Local:\n\t\t\tkind = SYMBOL_VARIABLE;\n\t\t\tbreak;\n\t\tdefault:\n\t\t\treturn Status.Continue;\n\t\t}\n\t\taddSymbol(var, var.name, kind);\n\t\treturn Status.Continue;\n\t}\n\n\toverride fn enter(enm: ir.EnumDeclaration) Status\n\t{\n\t\taddSymbol(enm, enm.name, SYMBOL_ENUM);\n\t\treturn Status.Continue;\n\t}\n\nprivate:\n\tfn addSymbol(node: ir.Node, name: string, type: i32)\n\t{\n\t\tsym: Symbol;\n\t\tsym.name = name;\n\t\tif (parents.length > 0) {\n\t\t\tsym.containerName = parents[$-1];\n\t\t}\n\t\tsym.loc = node.loc;\n\t\tsym.type = type;\n\t\tsymbols ~= sym;\n\t}\n}\n"}]}}Content-Length: 186

{"jsonrpc":"2.0","method":"workspace/didChangeWatchedFiles","params":{"changes":[{"uri":"file:///Users/bernard/Code/volt/Volta/vls/src/vls/server/symbolGathererVisitor.volt","type":2}]}}Content-Length: 4028

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/bernard/Code/volt/Volta/vls/src/vls/server/symbolGathererVisitor.volt","version":7},"contentChanges":[{"text":"module vls.server.symbolGathererVisitor;\n\nimport watt.text.sink;\n\nimport ir = volta.ir;\n\nimport volta.visitor.visitor;\nimport volta.ir.location;\n\nimport vls.lsp.constants;\n\nstruct Symbol\n{\n\tname: string;\n\tloc: Location;\n\ttype: i32;  //< See the SYMBOL_ enums in vls.lsp.constants.\n\tcontainerName: string;\n\n\tfn jsonString(uri: string) string\n\t{\n\t\tss: StringSink;\n\t\tss.sink(new \"{\\\"name\\\":\\\"${name}\\\",\\\"kind\\\":${type},\\\"location\\\":${locationToJsonString(loc, uri)}\";\n\t\tif (containerName.length > 0) {\n\t\t\tmsg ~= new \", \\\"containerName\\\":\\\"${containerName}\\\"\";\n\t\t}\n\t\tmsg ~= \"}\";\n\t\treturn msg; \n\t}\n}\n\nfn locationToJsonString(loc: Location, uri: string) string\n{\n\treturn new \"{\\\"uri\\\":\\\"${uri}\\\",\\\"range\\\":${locationToRange(loc)}}\";\n}\n\nfn locationToRange(loc: Location) string\n{\n\tendLoc := loc;\n\tendLoc.column += loc.length;\n\treturn new \"{\\\"start\\\":${locationToPosition(loc)},\\\"end\\\":${locationToPosition(endLoc)}}\";\n}\n\nfn locationToPosition(loc: Location) string\n{\n\treturn new \"{\\\"line\\\":${loc.line - 1},\\\"character\\\":${loc.column - 1}}\";\n}\n\nclass SymbolGathererVisitor : NullVisitor\n{\npublic:\n\tsymbols: Symbol[];\n\nprivate:\n\tparents: string[];\n\npublic:\n\toverride fn enter(mod: ir.Module) Status\n\t{\n\t\taddSymbol(mod, mod.name.toString(), SYMBOL_MODULE);\n\t\treturn Status.Continue;\n\t}\n\n\toverride fn enter(func: ir.Function) Status\n\t{\n\t\tkind: i32;\n\t\tname := func.name;\n\t\tswitch (func.kind) with (ir.Function.Kind) {\n\t\tcase Member:\n\t\t\tkind = SYMBOL_METHOD;\n\t\t\tbreak;\n\t\tcase Constructor:\n\t\t\tkind = SYMBOL_CONSTRUCTOR;\n\t\t\tname = \"this\";\n\t\t\tbreak;\n\t\tcase Destructor:\n\t\t\tname = \"~this\";\n\t\t\tkind = SYMBOL_FUNCTION;\n\t\t\tbreak;\n\t\tdefault:\n\t\t\tif (func.type.isProperty) {\n\t\t\t\tkind = SYMBOL_PROPERTY;\n\t\t\t} else {\n\t\t\t\tkind = SYMBOL_FUNCTION;\n\t\t\t}\n\t\t\tbreak;\n\t\t}\n\t\taddSymbol(func, name, kind);\n\t\treturn Status.Continue;\n\t}\n\n\toverride fn enter(strct: ir.Struct) Status\n\t{\n\t\taddSymbol(strct, strct.name, SYMBOL_CLASS);\n\t\tparents ~= strct.name;\n\t\treturn Status.Continue;\n\t}\n\n\toverride fn leave(strct: ir.Struct) Status\n\t{\n\t\tassert(parents.length > 0);\n\t\tparents = parents[0 .. $-1];\n\t\treturn Status.Continue;\n\t}\n\n\toverride fn enter(clss: ir.Class) Status\n\t{\n\t\taddSymbol(clss, clss.name, SYMBOL_CLASS);\n\t\tparents ~= clss.name;\n\t\treturn Status.Continue;\n\t}\n\n\toverride fn leave(clss: ir.Class) Status\n\t{\n\t\tassert(parents.length > 0);\n\t\tparents = parents[0 .. $-1];\n\t\treturn Status.Continue;\n\t}\n\n\toverride fn enter(intrfc: ir._Interface) Status\n\t{\n\t\taddSymbol(intrfc, intrfc.name, SYMBOL_INTERFACE);\n\t\tparents ~= intrfc.name;\n\t\treturn Status.Continue;\n\t}\n\n\toverride fn leave(intrfc: ir._Interface) Status\n\t{\n\t\tassert(parents.length > 0);\n\t\tparents = parents[0 .. $-1];\n\t\treturn Status.Continue;\n\t}\n\n\toverride fn enter(var: ir.Variable) Status\n\t{\n\t\tkind: i32;\n\t\tswitch (var.storage) with (ir.Variable.Storage) {\n\t\tcase Field:\n\t\t\tkind = SYMBOL_FIELD;\n\t\t\tbreak;\n\t\tcase Global:\n\t\tcase Local:\n\t\t\tkind = SYMBOL_VARIABLE;\n\t\t\tbreak;\n\t\tdefault:\n\t\t\treturn Status.Continue;\n\t\t}\n\t\taddSymbol(var, var.name, kind);\n\t\treturn Status.Continue;\n\t}\n\n\toverride fn enter(enm: ir.EnumDeclaration) Status\n\t{\n\t\taddSymbol(enm, enm.name, SYMBOL_ENUM);\n\t\treturn Status.Continue;\n\t}\n\nprivate:\n\tfn addSymbol(node: ir.Node, name: string, type: i32)\n\t{\n\t\tsym: Symbol;\n\t\tsym.name = name;\n\t\tif (parents.length > 0) {\n\t\t\tsym.containerName = parents[$-1];\n\t\t}\n\t\tsym.loc = node.loc;\n\t\tsym.type = type;\n\t\tsymbols ~= sym;\n\t}\n}\n"}]}}Content-Length: 220

{"jsonrpc":"2.0","id":1,"method":"textDocument/signatureHelp","params":{"textDocument":{"uri":"file:///Users/bernard/Code/volt/Volta/vls/src/vls/server/symbolGathererVisitor.volt"},"position":{"line":21,"character":10}}}Content-Length: 4027

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/bernard/Code/volt/Volta/vls/src/vls/server/symbolGathererVisitor.volt","version":8},"contentChanges":[{"text":"module vls.server.symbolGathererVisitor;\n\nimport watt.text.sink;\n\nimport ir = volta.ir;\n\nimport volta.visitor.visitor;\nimport volta.ir.location;\n\nimport vls.lsp.constants;\n\nstruct Symbol\n{\n\tname: string;\n\tloc: Location;\n\ttype: i32;  //< See the SYMBOL_ enums in vls.lsp.constants.\n\tcontainerName: string;\n\n\tfn jsonString(uri: string) string\n\t{\n\t\tss: StringSink;\n\t\tss.sinknew \"{\\\"name\\\":\\\"${name}\\\",\\\"kind\\\":${type},\\\"location\\\":${locationToJsonString(loc, uri)}\";\n\t\tif (containerName.length > 0) {\n\t\t\tmsg ~= new \", \\\"containerName\\\":\\\"${containerName}\\\"\";\n\t\t}\n\t\tmsg ~= \"}\";\n\t\treturn msg; \n\t}\n}\n\nfn locationToJsonString(loc: Location, uri: string) string\n{\n\treturn new \"{\\\"uri\\\":\\\"${uri}\\\",\\\"range\\\":${locationToRange(loc)}}\";\n}\n\nfn locationToRange(loc: Location) string\n{\n\tendLoc := loc;\n\tendLoc.column += loc.length;\n\treturn new \"{\\\"start\\\":${locationToPosition(loc)},\\\"end\\\":${locationToPosition(endLoc)}}\";\n}\n\nfn locationToPosition(loc: Location) string\n{\n\treturn new \"{\\\"line\\\":${loc.line - 1},\\\"character\\\":${loc.column - 1}}\";\n}\n\nclass SymbolGathererVisitor : NullVisitor\n{\npublic:\n\tsymbols: Symbol[];\n\nprivate:\n\tparents: string[];\n\npublic:\n\toverride fn enter(mod: ir.Module) Status\n\t{\n\t\taddSymbol(mod, mod.name.toString(), SYMBOL_MODULE);\n\t\treturn Status.Continue;\n\t}\n\n\toverride fn enter(func: ir.Function) Status\n\t{\n\t\tkind: i32;\n\t\tname := func.name;\n\t\tswitch (func.kind) with (ir.Function.Kind) {\n\t\tcase Member:\n\t\t\tkind = SYMBOL_METHOD;\n\t\t\tbreak;\n\t\tcase Constructor:\n\t\t\tkind = SYMBOL_CONSTRUCTOR;\n\t\t\tname = \"this\";\n\t\t\tbreak;\n\t\tcase Destructor:\n\t\t\tname = \"~this\";\n\t\t\tkind = SYMBOL_FUNCTION;\n\t\t\tbreak;\n\t\tdefault:\n\t\t\tif (func.type.isProperty) {\n\t\t\t\tkind = SYMBOL_PROPERTY;\n\t\t\t} else {\n\t\t\t\tkind = SYMBOL_FUNCTION;\n\t\t\t}\n\t\t\tbreak;\n\t\t}\n\t\taddSymbol(func, name, kind);\n\t\treturn Status.Continue;\n\t}\n\n\toverride fn enter(strct: ir.Struct) Status\n\t{\n\t\taddSymbol(strct, strct.name, SYMBOL_CLASS);\n\t\tparents ~= strct.name;\n\t\treturn Status.Continue;\n\t}\n\n\toverride fn leave(strct: ir.Struct) Status\n\t{\n\t\tassert(parents.length > 0);\n\t\tparents = parents[0 .. $-1];\n\t\treturn Status.Continue;\n\t}\n\n\toverride fn enter(clss: ir.Class) Status\n\t{\n\t\taddSymbol(clss, clss.name, SYMBOL_CLASS);\n\t\tparents ~= clss.name;\n\t\treturn Status.Continue;\n\t}\n\n\toverride fn leave(clss: ir.Class) Status\n\t{\n\t\tassert(parents.length > 0);\n\t\tparents = parents[0 .. $-1];\n\t\treturn Status.Continue;\n\t}\n\n\toverride fn enter(intrfc: ir._Interface) Status\n\t{\n\t\taddSymbol(intrfc, intrfc.name, SYMBOL_INTERFACE);\n\t\tparents ~= intrfc.name;\n\t\treturn Status.Continue;\n\t}\n\n\toverride fn leave(intrfc: ir._Interface) Status\n\t{\n\t\tassert(parents.length > 0);\n\t\tparents = parents[0 .. $-1];\n\t\treturn Status.Continue;\n\t}\n\n\toverride fn enter(var: ir.Variable) Status\n\t{\n\t\tkind: i32;\n\t\tswitch (var.storage) with (ir.Variable.Storage) {\n\t\tcase Field:\n\t\t\tkind = SYMBOL_FIELD;\n\t\t\tbreak;\n\t\tcase Global:\n\t\tcase Local:\n\t\t\tkind = SYMBOL_VARIABLE;\n\t\t\tbreak;\n\t\tdefault:\n\t\t\treturn Status.Continue;\n\t\t}\n\t\taddSymbol(var, var.name, kind);\n\t\treturn Status.Continue;\n\t}\n\n\toverride fn enter(enm: ir.EnumDeclaration) Status\n\t{\n\t\taddSymbol(enm, enm.name, SYMBOL_ENUM);\n\t\treturn Status.Continue;\n\t}\n\nprivate:\n\tfn addSymbol(node: ir.Node, name: string, type: i32)\n\t{\n\t\tsym: Symbol;\n\t\tsym.name = name;\n\t\tif (parents.length > 0) {\n\t\t\tsym.containerName = parents[$-1];\n\t\t}\n\t\tsym.loc = node.loc;\n\t\tsym.type = type;\n\t\tsymbols ~= sym;\n\t}\n}\n"}]}}Content-Length: 4028

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/bernard/Code/volt/Volta/vls/src/vls/server/symbolGathererVisitor.volt","version":9},"contentChanges":[{"text":"module vls.server.symbolGathererVisitor;\n\nimport watt.text.sink;\n\nimport ir = volta.ir;\n\nimport volta.visitor.visitor;\nimport volta.ir.location;\n\nimport vls.lsp.constants;\n\nstruct Symbol\n{\n\tname: string;\n\tloc: Location;\n\ttype: i32;  //< See the SYMBOL_ enums in vls.lsp.constants.\n\tcontainerName: string;\n\n\tfn jsonString(uri: string) string\n\t{\n\t\tss: StringSink;\n\t\tss.sink(new \"{\\\"name\\\":\\\"${name}\\\",\\\"kind\\\":${type},\\\"location\\\":${locationToJsonString(loc, uri)}\";\n\t\tif (containerName.length > 0) {\n\t\t\tmsg ~= new \", \\\"containerName\\\":\\\"${containerName}\\\"\";\n\t\t}\n\t\tmsg ~= \"}\";\n\t\treturn msg; \n\t}\n}\n\nfn locationToJsonString(loc: Location, uri: string) string\n{\n\treturn new \"{\\\"uri\\\":\\\"${uri}\\\",\\\"range\\\":${locationToRange(loc)}}\";\n}\n\nfn locationToRange(loc: Location) string\n{\n\tendLoc := loc;\n\tendLoc.column += loc.length;\n\treturn new \"{\\\"start\\\":${locationToPosition(loc)},\\\"end\\\":${locationToPosition(endLoc)}}\";\n}\n\nfn locationToPosition(loc: Location) string\n{\n\treturn new \"{\\\"line\\\":${loc.line - 1},\\\"character\\\":${loc.column - 1}}\";\n}\n\nclass SymbolGathererVisitor : NullVisitor\n{\npublic:\n\tsymbols: Symbol[];\n\nprivate:\n\tparents: string[];\n\npublic:\n\toverride fn enter(mod: ir.Module) Status\n\t{\n\t\taddSymbol(mod, mod.name.toString(), SYMBOL_MODULE);\n\t\treturn Status.Continue;\n\t}\n\n\toverride fn enter(func: ir.Function) Status\n\t{\n\t\tkind: i32;\n\t\tname := func.name;\n\t\tswitch (func.kind) with (ir.Function.Kind) {\n\t\tcase Member:\n\t\t\tkind = SYMBOL_METHOD;\n\t\t\tbreak;\n\t\tcase Constructor:\n\t\t\tkind = SYMBOL_CONSTRUCTOR;\n\t\t\tname = \"this\";\n\t\t\tbreak;\n\t\tcase Destructor:\n\t\t\tname = \"~this\";\n\t\t\tkind = SYMBOL_FUNCTION;\n\t\t\tbreak;\n\t\tdefault:\n\t\t\tif (func.type.isProperty) {\n\t\t\t\tkind = SYMBOL_PROPERTY;\n\t\t\t} else {\n\t\t\t\tkind = SYMBOL_FUNCTION;\n\t\t\t}\n\t\t\tbreak;\n\t\t}\n\t\taddSymbol(func, name, kind);\n\t\treturn Status.Continue;\n\t}\n\n\toverride fn enter(strct: ir.Struct) Status\n\t{\n\t\taddSymbol(strct, strct.name, SYMBOL_CLASS);\n\t\tparents ~= strct.name;\n\t\treturn Status.Continue;\n\t}\n\n\toverride fn leave(strct: ir.Struct) Status\n\t{\n\t\tassert(parents.length > 0);\n\t\tparents = parents[0 .. $-1];\n\t\treturn Status.Continue;\n\t}\n\n\toverride fn enter(clss: ir.Class) Status\n\t{\n\t\taddSymbol(clss, clss.name, SYMBOL_CLASS);\n\t\tparents ~= clss.name;\n\t\treturn Status.Continue;\n\t}\n\n\toverride fn leave(clss: ir.Class) Status\n\t{\n\t\tassert(parents.length > 0);\n\t\tparents = parents[0 .. $-1];\n\t\treturn Status.Continue;\n\t}\n\n\toverride fn enter(intrfc: ir._Interface) Status\n\t{\n\t\taddSymbol(intrfc, intrfc.name, SYMBOL_INTERFACE);\n\t\tparents ~= intrfc.name;\n\t\treturn Status.Continue;\n\t}\n\n\toverride fn leave(intrfc: ir._Interface) Status\n\t{\n\t\tassert(parents.length > 0);\n\t\tparents = parents[0 .. $-1];\n\t\treturn Status.Continue;\n\t}\n\n\toverride fn enter(var: ir.Variable) Status\n\t{\n\t\tkind: i32;\n\t\tswitch (var.storage) with (ir.Variable.Storage) {\n\t\tcase Field:\n\t\t\tkind = SYMBOL_FIELD;\n\t\t\tbreak;\n\t\tcase Global:\n\t\tcase Local:\n\t\t\tkind = SYMBOL_VARIABLE;\n\t\t\tbreak;\n\t\tdefault:\n\t\t\treturn Status.Continue;\n\t\t}\n\t\taddSymbol(var, var.name, kind);\n\t\treturn Status.Continue;\n\t}\n\n\toverride fn enter(enm: ir.EnumDeclaration) Status\n\t{\n\t\taddSymbol(enm, enm.name, SYMBOL_ENUM);\n\t\treturn Status.Continue;\n\t}\n\nprivate:\n\tfn addSymbol(node: ir.Node, name: string, type: i32)\n\t{\n\t\tsym: Symbol;\n\t\tsym.name = name;\n\t\tif (parents.length > 0) {\n\t\t\tsym.containerName = parents[$-1];\n\t\t}\n\t\tsym.loc = node.loc;\n\t\tsym.type = type;\n\t\tsymbols ~= sym;\n\t}\n}\n"}]}}Content-Length: 220

{"jsonrpc":"2.0","id":2,"method":"textDocument/signatureHelp","params":{"textDocument":{"uri":"file:///Users/bernard/Code/volt/Volta/vls/src/vls/server/symbolGathererVisitor.volt"},"position":{"line":21,"character":10}}}Content-Length: 4029

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/bernard/Code/volt/Volta/vls/src/vls/server/symbolGathererVisitor.volt","version":11},"contentChanges":[{"text":"module vls.server.symbolGathererVisitor;\n\nimport watt.text.sink;\n\nimport ir = volta.ir;\n\nimport volta.visitor.visitor;\nimport volta.ir.location;\n\nimport vls.lsp.constants;\n\nstruct Symbol\n{\n\tname: string;\n\tloc: Location;\n\ttype: i32;  //< See the SYMBOL_ enums in vls.lsp.constants.\n\tcontainerName: string;\n\n\tfn jsonString(uri: string) string\n\t{\n\t\tss: StringSink;\n\t\tss.sink9new \"{\\\"name\\\":\\\"${name}\\\",\\\"kind\\\":${type},\\\"location\\\":${locationToJsonString(loc, uri)}\";\n\t\tif (containerName.length > 0) {\n\t\t\tmsg ~= new \", \\\"containerName\\\":\\\"${containerName}\\\"\";\n\t\t}\n\t\tmsg ~= \"}\";\n\t\treturn msg; \n\t}\n}\n\nfn locationToJsonString(loc: Location, uri: string) string\n{\n\treturn new \"{\\\"uri\\\":\\\"${uri}\\\",\\\"range\\\":${locationToRange(loc)}}\";\n}\n\nfn locationToRange(loc: Location) string\n{\n\tendLoc := loc;\n\tendLoc.column += loc.length;\n\treturn new \"{\\\"start\\\":${locationToPosition(loc)},\\\"end\\\":${locationToPosition(endLoc)}}\";\n}\n\nfn locationToPosition(loc: Location) string\n{\n\treturn new \"{\\\"line\\\":${loc.line - 1},\\\"character\\\":${loc.column - 1}}\";\n}\n\nclass SymbolGathererVisitor : NullVisitor\n{\npublic:\n\tsymbols: Symbol[];\n\nprivate:\n\tparents: string[];\n\npublic:\n\toverride fn enter(mod: ir.Module) Status\n\t{\n\t\taddSymbol(mod, mod.name.toString(), SYMBOL_MODULE);\n\t\treturn Status.Continue;\n\t}\n\n\toverride fn enter(func: ir.Function) Status\n\t{\n\t\tkind: i32;\n\t\tname := func.name;\n\t\tswitch (func.kind) with (ir.Function.Kind) {\n\t\tcase Member:\n\t\t\tkind = SYMBOL_METHOD;\n\t\t\tbreak;\n\t\tcase Constructor:\n\t\t\tkind = SYMBOL_CONSTRUCTOR;\n\t\t\tname = \"this\";\n\t\t\tbreak;\n\t\tcase Destructor:\n\t\t\tname = \"~this\";\n\t\t\tkind = SYMBOL_FUNCTION;\n\t\t\tbreak;\n\t\tdefault:\n\t\t\tif (func.type.isProperty) {\n\t\t\t\tkind = SYMBOL_PROPERTY;\n\t\t\t} else {\n\t\t\t\tkind = SYMBOL_FUNCTION;\n\t\t\t}\n\t\t\tbreak;\n\t\t}\n\t\taddSymbol(func, name, kind);\n\t\treturn Status.Continue;\n\t}\n\n\toverride fn enter(strct: ir.Struct) Status\n\t{\n\t\taddSymbol(strct, strct.name, SYMBOL_CLASS);\n\t\tparents ~= strct.name;\n\t\treturn Status.Continue;\n\t}\n\n\toverride fn leave(strct: ir.Struct) Status\n\t{\n\t\tassert(parents.length > 0);\n\t\tparents = parents[0 .. $-1];\n\t\treturn Status.Continue;\n\t}\n\n\toverride fn enter(clss: ir.Class) Status\n\t{\n\t\taddSymbol(clss, clss.name, SYMBOL_CLASS);\n\t\tparents ~= clss.name;\n\t\treturn Status.Continue;\n\t}\n\n\toverride fn leave(clss: ir.Class) Status\n\t{\n\t\tassert(parents.length > 0);\n\t\tparents = parents[0 .. $-1];\n\t\treturn Status.Continue;\n\t}\n\n\toverride fn enter(intrfc: ir._Interface) Status\n\t{\n\t\taddSymbol(intrfc, intrfc.name, SYMBOL_INTERFACE);\n\t\tparents ~= intrfc.name;\n\t\treturn Status.Continue;\n\t}\n\n\toverride fn leave(intrfc: ir._Interface) Status\n\t{\n\t\tassert(parents.length > 0);\n\t\tparents = parents[0 .. $-1];\n\t\treturn Status.Continue;\n\t}\n\n\toverride fn enter(var: ir.Variable) Status\n\t{\n\t\tkind: i32;\n\t\tswitch (var.storage) with (ir.Variable.Storage) {\n\t\tcase Field:\n\t\t\tkind = SYMBOL_FIELD;\n\t\t\tbreak;\n\t\tcase Global:\n\t\tcase Local:\n\t\t\tkind = SYMBOL_VARIABLE;\n\t\t\tbreak;\n\t\tdefault:\n\t\t\treturn Status.Continue;\n\t\t}\n\t\taddSymbol(var, var.name, kind);\n\t\treturn Status.Continue;\n\t}\n\n\toverride fn enter(enm: ir.EnumDeclaration) Status\n\t{\n\t\taddSymbol(enm, enm.name, SYMBOL_ENUM);\n\t\treturn Status.Continue;\n\t}\n\nprivate:\n\tfn addSymbol(node: ir.Node, name: string, type: i32)\n\t{\n\t\tsym: Symbol;\n\t\tsym.name = name;\n\t\tif (parents.length > 0) {\n\t\t\tsym.containerName = parents[$-1];\n\t\t}\n\t\tsym.loc = node.loc;\n\t\tsym.type = type;\n\t\tsymbols ~= sym;\n\t}\n}\n"}]}}Content-Length: 4028

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/bernard/Code/volt/Volta/vls/src/vls/server/symbolGathererVisitor.volt","version":12},"contentChanges":[{"text":"module vls.server.symbolGathererVisitor;\n\nimport watt.text.sink;\n\nimport ir = volta.ir;\n\nimport volta.visitor.visitor;\nimport volta.ir.location;\n\nimport vls.lsp.constants;\n\nstruct Symbol\n{\n\tname: string;\n\tloc: Location;\n\ttype: i32;  //< See the SYMBOL_ enums in vls.lsp.constants.\n\tcontainerName: string;\n\n\tfn jsonString(uri: string) string\n\t{\n\t\tss: StringSink;\n\t\tss.sinknew \"{\\\"name\\\":\\\"${name}\\\",\\\"kind\\\":${type},\\\"location\\\":${locationToJsonString(loc, uri)}\";\n\t\tif (containerName.length > 0) {\n\t\t\tmsg ~= new \", \\\"containerName\\\":\\\"${containerName}\\\"\";\n\t\t}\n\t\tmsg ~= \"}\";\n\t\treturn msg; \n\t}\n}\n\nfn locationToJsonString(loc: Location, uri: string) string\n{\n\treturn new \"{\\\"uri\\\":\\\"${uri}\\\",\\\"range\\\":${locationToRange(loc)}}\";\n}\n\nfn locationToRange(loc: Location) string\n{\n\tendLoc := loc;\n\tendLoc.column += loc.length;\n\treturn new \"{\\\"start\\\":${locationToPosition(loc)},\\\"end\\\":${locationToPosition(endLoc)}}\";\n}\n\nfn locationToPosition(loc: Location) string\n{\n\treturn new \"{\\\"line\\\":${loc.line - 1},\\\"character\\\":${loc.column - 1}}\";\n}\n\nclass SymbolGathererVisitor : NullVisitor\n{\npublic:\n\tsymbols: Symbol[];\n\nprivate:\n\tparents: string[];\n\npublic:\n\toverride fn enter(mod: ir.Module) Status\n\t{\n\t\taddSymbol(mod, mod.name.toString(), SYMBOL_MODULE);\n\t\treturn Status.Continue;\n\t}\n\n\toverride fn enter(func: ir.Function) Status\n\t{\n\t\tkind: i32;\n\t\tname := func.name;\n\t\tswitch (func.kind) with (ir.Function.Kind) {\n\t\tcase Member:\n\t\t\tkind = SYMBOL_METHOD;\n\t\t\tbreak;\n\t\tcase Constructor:\n\t\t\tkind = SYMBOL_CONSTRUCTOR;\n\t\t\tname = \"this\";\n\t\t\tbreak;\n\t\tcase Destructor:\n\t\t\tname = \"~this\";\n\t\t\tkind = SYMBOL_FUNCTION;\n\t\t\tbreak;\n\t\tdefault:\n\t\t\tif (func.type.isProperty) {\n\t\t\t\tkind = SYMBOL_PROPERTY;\n\t\t\t} else {\n\t\t\t\tkind = SYMBOL_FUNCTION;\n\t\t\t}\n\t\t\tbreak;\n\t\t}\n\t\taddSymbol(func, name, kind);\n\t\treturn Status.Continue;\n\t}\n\n\toverride fn enter(strct: ir.Struct) Status\n\t{\n\t\taddSymbol(strct, strct.name, SYMBOL_CLASS);\n\t\tparents ~= strct.name;\n\t\treturn Status.Continue;\n\t}\n\n\toverride fn leave(strct: ir.Struct) Status\n\t{\n\t\tassert(parents.length > 0);\n\t\tparents = parents[0 .. $-1];\n\t\treturn Status.Continue;\n\t}\n\n\toverride fn enter(clss: ir.Class) Status\n\t{\n\t\taddSymbol(clss, clss.name, SYMBOL_CLASS);\n\t\tparents ~= clss.name;\n\t\treturn Status.Continue;\n\t}\n\n\toverride fn leave(clss: ir.Class) Status\n\t{\n\t\tassert(parents.length > 0);\n\t\tparents = parents[0 .. $-1];\n\t\treturn Status.Continue;\n\t}\n\n\toverride fn enter(intrfc: ir._Interface) Status\n\t{\n\t\taddSymbol(intrfc, intrfc.name, SYMBOL_INTERFACE);\n\t\tparents ~= intrfc.name;\n\t\treturn Status.Continue;\n\t}\n\n\toverride fn leave(intrfc: ir._Interface) Status\n\t{\n\t\tassert(parents.length > 0);\n\t\tparents = parents[0 .. $-1];\n\t\treturn Status.Continue;\n\t}\n\n\toverride fn enter(var: ir.Variable) Status\n\t{\n\t\tkind: i32;\n\t\tswitch (var.storage) with (ir.Variable.Storage) {\n\t\tcase Field:\n\t\t\tkind = SYMBOL_FIELD;\n\t\t\tbreak;\n\t\tcase Global:\n\t\tcase Local:\n\t\t\tkind = SYMBOL_VARIABLE;\n\t\t\tbreak;\n\t\tdefault:\n\t\t\treturn Status.Continue;\n\t\t}\n\t\taddSymbol(var, var.name, kind);\n\t\treturn Status.Continue;\n\t}\n\n\toverride fn enter(enm: ir.EnumDeclaration) Status\n\t{\n\t\taddSymbol(enm, enm.name, SYMBOL_ENUM);\n\t\treturn Status.Continue;\n\t}\n\nprivate:\n\tfn addSymbol(node: ir.Node, name: string, type: i32)\n\t{\n\t\tsym: Symbol;\n\t\tsym.name = name;\n\t\tif (parents.length > 0) {\n\t\t\tsym.containerName = parents[$-1];\n\t\t}\n\t\tsym.loc = node.loc;\n\t\tsym.type = type;\n\t\tsymbols ~= sym;\n\t}\n}\n"}]}}Content-Length: 4029

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/bernard/Code/volt/Volta/vls/src/vls/server/symbolGathererVisitor.volt","version":13},"contentChanges":[{"text":"module vls.server.symbolGathererVisitor;\n\nimport watt.text.sink;\n\nimport ir = volta.ir;\n\nimport volta.visitor.visitor;\nimport volta.ir.location;\n\nimport vls.lsp.constants;\n\nstruct Symbol\n{\n\tname: string;\n\tloc: Location;\n\ttype: i32;  //< See the SYMBOL_ enums in vls.lsp.constants.\n\tcontainerName: string;\n\n\tfn jsonString(uri: string) string\n\t{\n\t\tss: StringSink;\n\t\tss.sink9new \"{\\\"name\\\":\\\"${name}\\\",\\\"kind\\\":${type},\\\"location\\\":${locationToJsonString(loc, uri)}\";\n\t\tif (containerName.length > 0) {\n\t\t\tmsg ~= new \", \\\"containerName\\\":\\\"${containerName}\\\"\";\n\t\t}\n\t\tmsg ~= \"}\";\n\t\treturn msg; \n\t}\n}\n\nfn locationToJsonString(loc: Location, uri: string) string\n{\n\treturn new \"{\\\"uri\\\":\\\"${uri}\\\",\\\"range\\\":${locationToRange(loc)}}\";\n}\n\nfn locationToRange(loc: Location) string\n{\n\tendLoc := loc;\n\tendLoc.column += loc.length;\n\treturn new \"{\\\"start\\\":${locationToPosition(loc)},\\\"end\\\":${locationToPosition(endLoc)}}\";\n}\n\nfn locationToPosition(loc: Location) string\n{\n\treturn new \"{\\\"line\\\":${loc.line - 1},\\\"character\\\":${loc.column - 1}}\";\n}\n\nclass SymbolGathererVisitor : NullVisitor\n{\npublic:\n\tsymbols: Symbol[];\n\nprivate:\n\tparents: string[];\n\npublic:\n\toverride fn enter(mod: ir.Module) Status\n\t{\n\t\taddSymbol(mod, mod.name.toString(), SYMBOL_MODULE);\n\t\treturn Status.Continue;\n\t}\n\n\toverride fn enter(func: ir.Function) Status\n\t{\n\t\tkind: i32;\n\t\tname := func.name;\n\t\tswitch (func.kind) with (ir.Function.Kind) {\n\t\tcase Member:\n\t\t\tkind = SYMBOL_METHOD;\n\t\t\tbreak;\n\t\tcase Constructor:\n\t\t\tkind = SYMBOL_CONSTRUCTOR;\n\t\t\tname = \"this\";\n\t\t\tbreak;\n\t\tcase Destructor:\n\t\t\tname = \"~this\";\n\t\t\tkind = SYMBOL_FUNCTION;\n\t\t\tbreak;\n\t\tdefault:\n\t\t\tif (func.type.isProperty) {\n\t\t\t\tkind = SYMBOL_PROPERTY;\n\t\t\t} else {\n\t\t\t\tkind = SYMBOL_FUNCTION;\n\t\t\t}\n\t\t\tbreak;\n\t\t}\n\t\taddSymbol(func, name, kind);\n\t\treturn Status.Continue;\n\t}\n\n\toverride fn enter(strct: ir.Struct) Status\n\t{\n\t\taddSymbol(strct, strct.name, SYMBOL_CLASS);\n\t\tparents ~= strct.name;\n\t\treturn Status.Continue;\n\t}\n\n\toverride fn leave(strct: ir.Struct) Status\n\t{\n\t\tassert(parents.length > 0);\n\t\tparents = parents[0 .. $-1];\n\t\treturn Status.Continue;\n\t}\n\n\toverride fn enter(clss: ir.Class) Status\n\t{\n\t\taddSymbol(clss, clss.name, SYMBOL_CLASS);\n\t\tparents ~= clss.name;\n\t\treturn Status.Continue;\n\t}\n\n\toverride fn leave(clss: ir.Class) Status\n\t{\n\t\tassert(parents.length > 0);\n\t\tparents = parents[0 .. $-1];\n\t\treturn Status.Continue;\n\t}\n\n\toverride fn enter(intrfc: ir._Interface) Status\n\t{\n\t\taddSymbol(intrfc, intrfc.name, SYMBOL_INTERFACE);\n\t\tparents ~= intrfc.name;\n\t\treturn Status.Continue;\n\t}\n\n\toverride fn leave(intrfc: ir._Interface) Status\n\t{\n\t\tassert(parents.length > 0);\n\t\tparents = parents[0 .. $-1];\n\t\treturn Status.Continue;\n\t}\n\n\toverride fn enter(var: ir.Variable) Status\n\t{\n\t\tkind: i32;\n\t\tswitch (var.storage) with (ir.Variable.Storage) {\n\t\tcase Field:\n\t\t\tkind = SYMBOL_FIELD;\n\t\t\tbreak;\n\t\tcase Global:\n\t\tcase Local:\n\t\t\tkind = SYMBOL_VARIABLE;\n\t\t\tbreak;\n\t\tdefault:\n\t\t\treturn Status.Continue;\n\t\t}\n\t\taddSymbol(var, var.name, kind);\n\t\treturn Status.Continue;\n\t}\n\n\toverride fn enter(enm: ir.EnumDeclaration) Status\n\t{\n\t\taddSymbol(enm, enm.name, SYMBOL_ENUM);\n\t\treturn Status.Continue;\n\t}\n\nprivate:\n\tfn addSymbol(node: ir.Node, name: string, type: i32)\n\t{\n\t\tsym: Symbol;\n\t\tsym.name = name;\n\t\tif (parents.length > 0) {\n\t\t\tsym.containerName = parents[$-1];\n\t\t}\n\t\tsym.loc = node.loc;\n\t\tsym.type = type;\n\t\tsymbols ~= sym;\n\t}\n}\n"}]}}Content-Length: 4028

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/bernard/Code/volt/Volta/vls/src/vls/server/symbolGathererVisitor.volt","version":14},"contentChanges":[{"text":"module vls.server.symbolGathererVisitor;\n\nimport watt.text.sink;\n\nimport ir = volta.ir;\n\nimport volta.visitor.visitor;\nimport volta.ir.location;\n\nimport vls.lsp.constants;\n\nstruct Symbol\n{\n\tname: string;\n\tloc: Location;\n\ttype: i32;  //< See the SYMBOL_ enums in vls.lsp.constants.\n\tcontainerName: string;\n\n\tfn jsonString(uri: string) string\n\t{\n\t\tss: StringSink;\n\t\tss.sinknew \"{\\\"name\\\":\\\"${name}\\\",\\\"kind\\\":${type},\\\"location\\\":${locationToJsonString(loc, uri)}\";\n\t\tif (containerName.length > 0) {\n\t\t\tmsg ~= new \", \\\"containerName\\\":\\\"${containerName}\\\"\";\n\t\t}\n\t\tmsg ~= \"}\";\n\t\treturn msg; \n\t}\n}\n\nfn locationToJsonString(loc: Location, uri: string) string\n{\n\treturn new \"{\\\"uri\\\":\\\"${uri}\\\",\\\"range\\\":${locationToRange(loc)}}\";\n}\n\nfn locationToRange(loc: Location) string\n{\n\tendLoc := loc;\n\tendLoc.column += loc.length;\n\treturn new \"{\\\"start\\\":${locationToPosition(loc)},\\\"end\\\":${locationToPosition(endLoc)}}\";\n}\n\nfn locationToPosition(loc: Location) string\n{\n\treturn new \"{\\\"line\\\":${loc.line - 1},\\\"character\\\":${loc.column - 1}}\";\n}\n\nclass SymbolGathererVisitor : NullVisitor\n{\npublic:\n\tsymbols: Symbol[];\n\nprivate:\n\tparents: string[];\n\npublic:\n\toverride fn enter(mod: ir.Module) Status\n\t{\n\t\taddSymbol(mod, mod.name.toString(), SYMBOL_MODULE);\n\t\treturn Status.Continue;\n\t}\n\n\toverride fn enter(func: ir.Function) Status\n\t{\n\t\tkind: i32;\n\t\tname := func.name;\n\t\tswitch (func.kind) with (ir.Function.Kind) {\n\t\tcase Member:\n\t\t\tkind = SYMBOL_METHOD;\n\t\t\tbreak;\n\t\tcase Constructor:\n\t\t\tkind = SYMBOL_CONSTRUCTOR;\n\t\t\tname = \"this\";\n\t\t\tbreak;\n\t\tcase Destructor:\n\t\t\tname = \"~this\";\n\t\t\tkind = SYMBOL_FUNCTION;\n\t\t\tbreak;\n\t\tdefault:\n\t\t\tif (func.type.isProperty) {\n\t\t\t\tkind = SYMBOL_PROPERTY;\n\t\t\t} else {\n\t\t\t\tkind = SYMBOL_FUNCTION;\n\t\t\t}\n\t\t\tbreak;\n\t\t}\n\t\taddSymbol(func, name, kind);\n\t\treturn Status.Continue;\n\t}\n\n\toverride fn enter(strct: ir.Struct) Status\n\t{\n\t\taddSymbol(strct, strct.name, SYMBOL_CLASS);\n\t\tparents ~= strct.name;\n\t\treturn Status.Continue;\n\t}\n\n\toverride fn leave(strct: ir.Struct) Status\n\t{\n\t\tassert(parents.length > 0);\n\t\tparents = parents[0 .. $-1];\n\t\treturn Status.Continue;\n\t}\n\n\toverride fn enter(clss: ir.Class) Status\n\t{\n\t\taddSymbol(clss, clss.name, SYMBOL_CLASS);\n\t\tparents ~= clss.name;\n\t\treturn Status.Continue;\n\t}\n\n\toverride fn leave(clss: ir.Class) Status\n\t{\n\t\tassert(parents.length > 0);\n\t\tparents = parents[0 .. $-1];\n\t\treturn Status.Continue;\n\t}\n\n\toverride fn enter(intrfc: ir._Interface) Status\n\t{\n\t\taddSymbol(intrfc, intrfc.name, SYMBOL_INTERFACE);\n\t\tparents ~= intrfc.name;\n\t\treturn Status.Continue;\n\t}\n\n\toverride fn leave(intrfc: ir._Interface) Status\n\t{\n\t\tassert(parents.length > 0);\n\t\tparents = parents[0 .. $-1];\n\t\treturn Status.Continue;\n\t}\n\n\toverride fn enter(var: ir.Variable) Status\n\t{\n\t\tkind: i32;\n\t\tswitch (var.storage) with (ir.Variable.Storage) {\n\t\tcase Field:\n\t\t\tkind = SYMBOL_FIELD;\n\t\t\tbreak;\n\t\tcase Global:\n\t\tcase Local:\n\t\t\tkind = SYMBOL_VARIABLE;\n\t\t\tbreak;\n\t\tdefault:\n\t\t\treturn Status.Continue;\n\t\t}\n\t\taddSymbol(var, var.name, kind);\n\t\treturn Status.Continue;\n\t}\n\n\toverride fn enter(enm: ir.EnumDeclaration) Status\n\t{\n\t\taddSymbol(enm, enm.name, SYMBOL_ENUM);\n\t\treturn Status.Continue;\n\t}\n\nprivate:\n\tfn addSymbol(node: ir.Node, name: string, type: i32)\n\t{\n\t\tsym: Symbol;\n\t\tsym.name = name;\n\t\tif (parents.length > 0) {\n\t\t\tsym.containerName = parents[$-1];\n\t\t}\n\t\tsym.loc = node.loc;\n\t\tsym.type = type;\n\t\tsymbols ~= sym;\n\t}\n}\n"}]}}Content-Length: 4029

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/bernard/Code/volt/Volta/vls/src/vls/server/symbolGathererVisitor.volt","version":15},"contentChanges":[{"text":"module vls.server.symbolGathererVisitor;\n\nimport watt.text.sink;\n\nimport ir = volta.ir;\n\nimport volta.visitor.visitor;\nimport volta.ir.location;\n\nimport vls.lsp.constants;\n\nstruct Symbol\n{\n\tname: string;\n\tloc: Location;\n\ttype: i32;  //< See the SYMBOL_ enums in vls.lsp.constants.\n\tcontainerName: string;\n\n\tfn jsonString(uri: string) string\n\t{\n\t\tss: StringSink;\n\t\tss.sink(new \"{\\\"name\\\":\\\"${name}\\\",\\\"kind\\\":${type},\\\"location\\\":${locationToJsonString(loc, uri)}\";\n\t\tif (containerName.length > 0) {\n\t\t\tmsg ~= new \", \\\"containerName\\\":\\\"${containerName}\\\"\";\n\t\t}\n\t\tmsg ~= \"}\";\n\t\treturn msg; \n\t}\n}\n\nfn locationToJsonString(loc: Location, uri: string) string\n{\n\treturn new \"{\\\"uri\\\":\\\"${uri}\\\",\\\"range\\\":${locationToRange(loc)}}\";\n}\n\nfn locationToRange(loc: Location) string\n{\n\tendLoc := loc;\n\tendLoc.column += loc.length;\n\treturn new \"{\\\"start\\\":${locationToPosition(loc)},\\\"end\\\":${locationToPosition(endLoc)}}\";\n}\n\nfn locationToPosition(loc: Location) string\n{\n\treturn new \"{\\\"line\\\":${loc.line - 1},\\\"character\\\":${loc.column - 1}}\";\n}\n\nclass SymbolGathererVisitor : NullVisitor\n{\npublic:\n\tsymbols: Symbol[];\n\nprivate:\n\tparents: string[];\n\npublic:\n\toverride fn enter(mod: ir.Module) Status\n\t{\n\t\taddSymbol(mod, mod.name.toString(), SYMBOL_MODULE);\n\t\treturn Status.Continue;\n\t}\n\n\toverride fn enter(func: ir.Function) Status\n\t{\n\t\tkind: i32;\n\t\tname := func.name;\n\t\tswitch (func.kind) with (ir.Function.Kind) {\n\t\tcase Member:\n\t\t\tkind = SYMBOL_METHOD;\n\t\t\tbreak;\n\t\tcase Constructor:\n\t\t\tkind = SYMBOL_CONSTRUCTOR;\n\t\t\tname = \"this\";\n\t\t\tbreak;\n\t\tcase Destructor:\n\t\t\tname = \"~this\";\n\t\t\tkind = SYMBOL_FUNCTION;\n\t\t\tbreak;\n\t\tdefault:\n\t\t\tif (func.type.isProperty) {\n\t\t\t\tkind = SYMBOL_PROPERTY;\n\t\t\t} else {\n\t\t\t\tkind = SYMBOL_FUNCTION;\n\t\t\t}\n\t\t\tbreak;\n\t\t}\n\t\taddSymbol(func, name, kind);\n\t\treturn Status.Continue;\n\t}\n\n\toverride fn enter(strct: ir.Struct) Status\n\t{\n\t\taddSymbol(strct, strct.name, SYMBOL_CLASS);\n\t\tparents ~= strct.name;\n\t\treturn Status.Continue;\n\t}\n\n\toverride fn leave(strct: ir.Struct) Status\n\t{\n\t\tassert(parents.length > 0);\n\t\tparents = parents[0 .. $-1];\n\t\treturn Status.Continue;\n\t}\n\n\toverride fn enter(clss: ir.Class) Status\n\t{\n\t\taddSymbol(clss, clss.name, SYMBOL_CLASS);\n\t\tparents ~= clss.name;\n\t\treturn Status.Continue;\n\t}\n\n\toverride fn leave(clss: ir.Class) Status\n\t{\n\t\tassert(parents.length > 0);\n\t\tparents = parents[0 .. $-1];\n\t\treturn Status.Continue;\n\t}\n\n\toverride fn enter(intrfc: ir._Interface) Status\n\t{\n\t\taddSymbol(intrfc, intrfc.name, SYMBOL_INTERFACE);\n\t\tparents ~= intrfc.name;\n\t\treturn Status.Continue;\n\t}\n\n\toverride fn leave(intrfc: ir._Interface) Status\n\t{\n\t\tassert(parents.length > 0);\n\t\tparents = parents[0 .. $-1];\n\t\treturn Status.Continue;\n\t}\n\n\toverride fn enter(var: ir.Variable) Status\n\t{\n\t\tkind: i32;\n\t\tswitch (var.storage) with (ir.Variable.Storage) {\n\t\tcase Field:\n\t\t\tkind = SYMBOL_FIELD;\n\t\t\tbreak;\n\t\tcase Global:\n\t\tcase Local:\n\t\t\tkind = SYMBOL_VARIABLE;\n\t\t\tbreak;\n\t\tdefault:\n\t\t\treturn Status.Continue;\n\t\t}\n\t\taddSymbol(var, var.name, kind);\n\t\treturn Status.Continue;\n\t}\n\n\toverride fn enter(enm: ir.EnumDeclaration) Status\n\t{\n\t\taddSymbol(enm, enm.name, SYMBOL_ENUM);\n\t\treturn Status.Continue;\n\t}\n\nprivate:\n\tfn addSymbol(node: ir.Node, name: string, type: i32)\n\t{\n\t\tsym: Symbol;\n\t\tsym.name = name;\n\t\tif (parents.length > 0) {\n\t\t\tsym.containerName = parents[$-1];\n\t\t}\n\t\tsym.loc = node.loc;\n\t\tsym.type = type;\n\t\tsymbols ~= sym;\n\t}\n}\n"}]}}Content-Length: 220

{"jsonrpc":"2.0","id":3,"method":"textDocument/signatureHelp","params":{"textDocument":{"uri":"file:///Users/bernard/Code/volt/Volta/vls/src/vls/server/symbolGathererVisitor.volt"},"position":{"line":21,"character":10}}}Content-Length: 212

{"jsonrpc":"2.0","id":4,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/bernard/Code/volt/Volta/vls/src/vls/server/symbolGathererVisitor.volt"},"position":{"line":21,"character":99}}}Content-Length: 211

{"jsonrpc":"2.0","id":5,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/bernard/Code/volt/Volta/vls/src/vls/server/symbolGathererVisitor.volt"},"position":{"line":21,"character":1}}}Content-Length: 4031

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/bernard/Code/volt/Volta/vls/src/vls/server/symbolGathererVisitor.volt","version":17},"contentChanges":[{"text":"module vls.server.symbolGathererVisitor;\n\nimport watt.text.sink;\n\nimport ir = volta.ir;\n\nimport volta.visitor.visitor;\nimport volta.ir.location;\n\nimport vls.lsp.constants;\n\nstruct Symbol\n{\n\tname: string;\n\tloc: Location;\n\ttype: i32;  //< See the SYMBOL_ enums in vls.lsp.constants.\n\tcontainerName: string;\n\n\tfn jsonString(uri: string) string\n\t{\n\t\tss: StringSink;\n\t//\tss.sink(new \"{\\\"name\\\":\\\"${name}\\\",\\\"kind\\\":${type},\\\"location\\\":${locationToJsonString(loc, uri)}\";\n\t\tif (containerName.length > 0) {\n\t\t\tmsg ~= new \", \\\"containerName\\\":\\\"${containerName}\\\"\";\n\t\t}\n\t\tmsg ~= \"}\";\n\t\treturn msg; \n\t}\n}\n\nfn locationToJsonString(loc: Location, uri: string) string\n{\n\treturn new \"{\\\"uri\\\":\\\"${uri}\\\",\\\"range\\\":${locationToRange(loc)}}\";\n}\n\nfn locationToRange(loc: Location) string\n{\n\tendLoc := loc;\n\tendLoc.column += loc.length;\n\treturn new \"{\\\"start\\\":${locationToPosition(loc)},\\\"end\\\":${locationToPosition(endLoc)}}\";\n}\n\nfn locationToPosition(loc: Location) string\n{\n\treturn new \"{\\\"line\\\":${loc.line - 1},\\\"character\\\":${loc.column - 1}}\";\n}\n\nclass SymbolGathererVisitor : NullVisitor\n{\npublic:\n\tsymbols: Symbol[];\n\nprivate:\n\tparents: string[];\n\npublic:\n\toverride fn enter(mod: ir.Module) Status\n\t{\n\t\taddSymbol(mod, mod.name.toString(), SYMBOL_MODULE);\n\t\treturn Status.Continue;\n\t}\n\n\toverride fn enter(func: ir.Function) Status\n\t{\n\t\tkind: i32;\n\t\tname := func.name;\n\t\tswitch (func.kind) with (ir.Function.Kind) {\n\t\tcase Member:\n\t\t\tkind = SYMBOL_METHOD;\n\t\t\tbreak;\n\t\tcase Constructor:\n\t\t\tkind = SYMBOL_CONSTRUCTOR;\n\t\t\tname = \"this\";\n\t\t\tbreak;\n\t\tcase Destructor:\n\t\t\tname = \"~this\";\n\t\t\tkind = SYMBOL_FUNCTION;\n\t\t\tbreak;\n\t\tdefault:\n\t\t\tif (func.type.isProperty) {\n\t\t\t\tkind = SYMBOL_PROPERTY;\n\t\t\t} else {\n\t\t\t\tkind = SYMBOL_FUNCTION;\n\t\t\t}\n\t\t\tbreak;\n\t\t}\n\t\taddSymbol(func, name, kind);\n\t\treturn Status.Continue;\n\t}\n\n\toverride fn enter(strct: ir.Struct) Status\n\t{\n\t\taddSymbol(strct, strct.name, SYMBOL_CLASS);\n\t\tparents ~= strct.name;\n\t\treturn Status.Continue;\n\t}\n\n\toverride fn leave(strct: ir.Struct) Status\n\t{\n\t\tassert(parents.length > 0);\n\t\tparents = parents[0 .. $-1];\n\t\treturn Status.Continue;\n\t}\n\n\toverride fn enter(clss: ir.Class) Status\n\t{\n\t\taddSymbol(clss, clss.name, SYMBOL_CLASS);\n\t\tparents ~= clss.name;\n\t\treturn Status.Continue;\n\t}\n\n\toverride fn leave(clss: ir.Class) Status\n\t{\n\t\tassert(parents.length > 0);\n\t\tparents = parents[0 .. $-1];\n\t\treturn Status.Continue;\n\t}\n\n\toverride fn enter(intrfc: ir._Interface) Status\n\t{\n\t\taddSymbol(intrfc, intrfc.name, SYMBOL_INTERFACE);\n\t\tparents ~= intrfc.name;\n\t\treturn Status.Continue;\n\t}\n\n\toverride fn leave(intrfc: ir._Interface) Status\n\t{\n\t\tassert(parents.length > 0);\n\t\tparents = parents[0 .. $-1];\n\t\treturn Status.Continue;\n\t}\n\n\toverride fn enter(var: ir.Variable) Status\n\t{\n\t\tkind: i32;\n\t\tswitch (var.storage) with (ir.Variable.Storage) {\n\t\tcase Field:\n\t\t\tkind = SYMBOL_FIELD;\n\t\t\tbreak;\n\t\tcase Global:\n\t\tcase Local:\n\t\t\tkind = SYMBOL_VARIABLE;\n\t\t\tbreak;\n\t\tdefault:\n\t\t\treturn Status.Continue;\n\t\t}\n\t\taddSymbol(var, var.name, kind);\n\t\treturn Status.Continue;\n\t}\n\n\toverride fn enter(enm: ir.EnumDeclaration) Status\n\t{\n\t\taddSymbol(enm, enm.name, SYMBOL_ENUM);\n\t\treturn Status.Continue;\n\t}\n\nprivate:\n\tfn addSymbol(node: ir.Node, name: string, type: i32)\n\t{\n\t\tsym: Symbol;\n\t\tsym.name = name;\n\t\tif (parents.length > 0) {\n\t\t\tsym.containerName = parents[$-1];\n\t\t}\n\t\tsym.loc = node.loc;\n\t\tsym.type = type;\n\t\tsymbols ~= sym;\n\t}\n}\n"}]}}Content-Length: 4031

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/bernard/Code/volt/Volta/vls/src/vls/server/symbolGathererVisitor.volt","version":17},"contentChanges":[{"text":"module vls.server.symbolGathererVisitor;\n\nimport watt.text.sink;\n\nimport ir = volta.ir;\n\nimport volta.visitor.visitor;\nimport volta.ir.location;\n\nimport vls.lsp.constants;\n\nstruct Symbol\n{\n\tname: string;\n\tloc: Location;\n\ttype: i32;  //< See the SYMBOL_ enums in vls.lsp.constants.\n\tcontainerName: string;\n\n\tfn jsonString(uri: string) string\n\t{\n\t\tss: StringSink;\n\t//\tss.sink(new \"{\\\"name\\\":\\\"${name}\\\",\\\"kind\\\":${type},\\\"location\\\":${locationToJsonString(loc, uri)}\";\n\t\tif (containerName.length > 0) {\n\t\t\tmsg ~= new \", \\\"containerName\\\":\\\"${containerName}\\\"\";\n\t\t}\n\t\tmsg ~= \"}\";\n\t\treturn msg; \n\t}\n}\n\nfn locationToJsonString(loc: Location, uri: string) string\n{\n\treturn new \"{\\\"uri\\\":\\\"${uri}\\\",\\\"range\\\":${locationToRange(loc)}}\";\n}\n\nfn locationToRange(loc: Location) string\n{\n\tendLoc := loc;\n\tendLoc.column += loc.length;\n\treturn new \"{\\\"start\\\":${locationToPosition(loc)},\\\"end\\\":${locationToPosition(endLoc)}}\";\n}\n\nfn locationToPosition(loc: Location) string\n{\n\treturn new \"{\\\"line\\\":${loc.line - 1},\\\"character\\\":${loc.column - 1}}\";\n}\n\nclass SymbolGathererVisitor : NullVisitor\n{\npublic:\n\tsymbols: Symbol[];\n\nprivate:\n\tparents: string[];\n\npublic:\n\toverride fn enter(mod: ir.Module) Status\n\t{\n\t\taddSymbol(mod, mod.name.toString(), SYMBOL_MODULE);\n\t\treturn Status.Continue;\n\t}\n\n\toverride fn enter(func: ir.Function) Status\n\t{\n\t\tkind: i32;\n\t\tname := func.name;\n\t\tswitch (func.kind) with (ir.Function.Kind) {\n\t\tcase Member:\n\t\t\tkind = SYMBOL_METHOD;\n\t\t\tbreak;\n\t\tcase Constructor:\n\t\t\tkind = SYMBOL_CONSTRUCTOR;\n\t\t\tname = \"this\";\n\t\t\tbreak;\n\t\tcase Destructor:\n\t\t\tname = \"~this\";\n\t\t\tkind = SYMBOL_FUNCTION;\n\t\t\tbreak;\n\t\tdefault:\n\t\t\tif (func.type.isProperty) {\n\t\t\t\tkind = SYMBOL_PROPERTY;\n\t\t\t} else {\n\t\t\t\tkind = SYMBOL_FUNCTION;\n\t\t\t}\n\t\t\tbreak;\n\t\t}\n\t\taddSymbol(func, name, kind);\n\t\treturn Status.Continue;\n\t}\n\n\toverride fn enter(strct: ir.Struct) Status\n\t{\n\t\taddSymbol(strct, strct.name, SYMBOL_CLASS);\n\t\tparents ~= strct.name;\n\t\treturn Status.Continue;\n\t}\n\n\toverride fn leave(strct: ir.Struct) Status\n\t{\n\t\tassert(parents.length > 0);\n\t\tparents = parents[0 .. $-1];\n\t\treturn Status.Continue;\n\t}\n\n\toverride fn enter(clss: ir.Class) Status\n\t{\n\t\taddSymbol(clss, clss.name, SYMBOL_CLASS);\n\t\tparents ~= clss.name;\n\t\treturn Status.Continue;\n\t}\n\n\toverride fn leave(clss: ir.Class) Status\n\t{\n\t\tassert(parents.length > 0);\n\t\tparents = parents[0 .. $-1];\n\t\treturn Status.Continue;\n\t}\n\n\toverride fn enter(intrfc: ir._Interface) Status\n\t{\n\t\taddSymbol(intrfc, intrfc.name, SYMBOL_INTERFACE);\n\t\tparents ~= intrfc.name;\n\t\treturn Status.Continue;\n\t}\n\n\toverride fn leave(intrfc: ir._Interface) Status\n\t{\n\t\tassert(parents.length > 0);\n\t\tparents = parents[0 .. $-1];\n\t\treturn Status.Continue;\n\t}\n\n\toverride fn enter(var: ir.Variable) Status\n\t{\n\t\tkind: i32;\n\t\tswitch (var.storage) with (ir.Variable.Storage) {\n\t\tcase Field:\n\t\t\tkind = SYMBOL_FIELD;\n\t\t\tbreak;\n\t\tcase Global:\n\t\tcase Local:\n\t\t\tkind = SYMBOL_VARIABLE;\n\t\t\tbreak;\n\t\tdefault:\n\t\t\treturn Status.Continue;\n\t\t}\n\t\taddSymbol(var, var.name, kind);\n\t\treturn Status.Continue;\n\t}\n\n\toverride fn enter(enm: ir.EnumDeclaration) Status\n\t{\n\t\taddSymbol(enm, enm.name, SYMBOL_ENUM);\n\t\treturn Status.Continue;\n\t}\n\nprivate:\n\tfn addSymbol(node: ir.Node, name: string, type: i32)\n\t{\n\t\tsym: Symbol;\n\t\tsym.name = name;\n\t\tif (parents.length > 0) {\n\t\t\tsym.containerName = parents[$-1];\n\t\t}\n\t\tsym.loc = node.loc;\n\t\tsym.type = type;\n\t\tsymbols ~= sym;\n\t}\n}\n"}]}}Content-Length: 186

{"jsonrpc":"2.0","method":"workspace/didChangeWatchedFiles","params":{"changes":[{"uri":"file:///Users/bernard/Code/volt/Volta/vls/src/vls/server/symbolGathererVisitor.volt","type":2}]}}Content-Length: 186

{"jsonrpc":"2.0","method":"workspace/didChangeWatchedFiles","params":{"changes":[{"uri":"file:///Users/bernard/Code/volt/Volta/vls/src/vls/server/symbolGathererVisitor.volt","type":2}]}}Content-Length: 186

{"jsonrpc":"2.0","method":"workspace/didChangeWatchedFiles","params":{"changes":[{"uri":"file:///Users/bernard/Code/volt/Volta/vls/src/vls/server/symbolGathererVisitor.volt","type":2}]}}Content-Length: 183

{"jsonrpc":"2.0","id":6,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///Users/bernard/Code/volt/Volta/vls/src/vls/server/symbolGathererVisitor.volt"}}}Content-Length: 186

{"jsonrpc":"2.0","method":"workspace/didChangeWatchedFiles","params":{"changes":[{"uri":"file:///Users/bernard/Code/volt/Volta/vls/src/vls/server/symbolGathererVisitor.volt","type":2}]}}Content-Length: 4029

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/bernard/Code/volt/Volta/vls/src/vls/server/symbolGathererVisitor.volt","version":19},"contentChanges":[{"text":"module vls.server.symbolGathererVisitor;\n\nimport watt.text.sink;\n\nimport ir = volta.ir;\n\nimport volta.visitor.visitor;\nimport volta.ir.location;\n\nimport vls.lsp.constants;\n\nstruct Symbol\n{\n\tname: string;\n\tloc: Location;\n\ttype: i32;  //< See the SYMBOL_ enums in vls.lsp.constants.\n\tcontainerName: string;\n\n\tfn jsonString(uri: string) string\n\t{\n\t\tss: StringSink;\n\t\tss.sink(new \"{\\\"name\\\":\\\"${name}\\\",\\\"kind\\\":${type},\\\"location\\\":${locationToJsonString(loc, uri)}\";\n\t\tif (containerName.length > 0) {\n\t\t\tmsg ~= new \", \\\"containerName\\\":\\\"${containerName}\\\"\";\n\t\t}\n\t\tmsg ~= \"}\";\n\t\treturn msg; \n\t}\n}\n\nfn locationToJsonString(loc: Location, uri: string) string\n{\n\treturn new \"{\\\"uri\\\":\\\"${uri}\\\",\\\"range\\\":${locationToRange(loc)}}\";\n}\n\nfn locationToRange(loc: Location) string\n{\n\tendLoc := loc;\n\tendLoc.column += loc.length;\n\treturn new \"{\\\"start\\\":${locationToPosition(loc)},\\\"end\\\":${locationToPosition(endLoc)}}\";\n}\n\nfn locationToPosition(loc: Location) string\n{\n\treturn new \"{\\\"line\\\":${loc.line - 1},\\\"character\\\":${loc.column - 1}}\";\n}\n\nclass SymbolGathererVisitor : NullVisitor\n{\npublic:\n\tsymbols: Symbol[];\n\nprivate:\n\tparents: string[];\n\npublic:\n\toverride fn enter(mod: ir.Module) Status\n\t{\n\t\taddSymbol(mod, mod.name.toString(), SYMBOL_MODULE);\n\t\treturn Status.Continue;\n\t}\n\n\toverride fn enter(func: ir.Function) Status\n\t{\n\t\tkind: i32;\n\t\tname := func.name;\n\t\tswitch (func.kind) with (ir.Function.Kind) {\n\t\tcase Member:\n\t\t\tkind = SYMBOL_METHOD;\n\t\t\tbreak;\n\t\tcase Constructor:\n\t\t\tkind = SYMBOL_CONSTRUCTOR;\n\t\t\tname = \"this\";\n\t\t\tbreak;\n\t\tcase Destructor:\n\t\t\tname = \"~this\";\n\t\t\tkind = SYMBOL_FUNCTION;\n\t\t\tbreak;\n\t\tdefault:\n\t\t\tif (func.type.isProperty) {\n\t\t\t\tkind = SYMBOL_PROPERTY;\n\t\t\t} else {\n\t\t\t\tkind = SYMBOL_FUNCTION;\n\t\t\t}\n\t\t\tbreak;\n\t\t}\n\t\taddSymbol(func, name, kind);\n\t\treturn Status.Continue;\n\t}\n\n\toverride fn enter(strct: ir.Struct) Status\n\t{\n\t\taddSymbol(strct, strct.name, SYMBOL_CLASS);\n\t\tparents ~= strct.name;\n\t\treturn Status.Continue;\n\t}\n\n\toverride fn leave(strct: ir.Struct) Status\n\t{\n\t\tassert(parents.length > 0);\n\t\tparents = parents[0 .. $-1];\n\t\treturn Status.Continue;\n\t}\n\n\toverride fn enter(clss: ir.Class) Status\n\t{\n\t\taddSymbol(clss, clss.name, SYMBOL_CLASS);\n\t\tparents ~= clss.name;\n\t\treturn Status.Continue;\n\t}\n\n\toverride fn leave(clss: ir.Class) Status\n\t{\n\t\tassert(parents.length > 0);\n\t\tparents = parents[0 .. $-1];\n\t\treturn Status.Continue;\n\t}\n\n\toverride fn enter(intrfc: ir._Interface) Status\n\t{\n\t\taddSymbol(intrfc, intrfc.name, SYMBOL_INTERFACE);\n\t\tparents ~= intrfc.name;\n\t\treturn Status.Continue;\n\t}\n\n\toverride fn leave(intrfc: ir._Interface) Status\n\t{\n\t\tassert(parents.length > 0);\n\t\tparents = parents[0 .. $-1];\n\t\treturn Status.Continue;\n\t}\n\n\toverride fn enter(var: ir.Variable) Status\n\t{\n\t\tkind: i32;\n\t\tswitch (var.storage) with (ir.Variable.Storage) {\n\t\tcase Field:\n\t\t\tkind = SYMBOL_FIELD;\n\t\t\tbreak;\n\t\tcase Global:\n\t\tcase Local:\n\t\t\tkind = SYMBOL_VARIABLE;\n\t\t\tbreak;\n\t\tdefault:\n\t\t\treturn Status.Continue;\n\t\t}\n\t\taddSymbol(var, var.name, kind);\n\t\treturn Status.Continue;\n\t}\n\n\toverride fn enter(enm: ir.EnumDeclaration) Status\n\t{\n\t\taddSymbol(enm, enm.name, SYMBOL_ENUM);\n\t\treturn Status.Continue;\n\t}\n\nprivate:\n\tfn addSymbol(node: ir.Node, name: string, type: i32)\n\t{\n\t\tsym: Symbol;\n\t\tsym.name = name;\n\t\tif (parents.length > 0) {\n\t\t\tsym.containerName = parents[$-1];\n\t\t}\n\t\tsym.loc = node.loc;\n\t\tsym.type = type;\n\t\tsymbols ~= sym;\n\t}\n}\n"}]}}Content-Length: 4028

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/bernard/Code/volt/Volta/vls/src/vls/server/symbolGathererVisitor.volt","version":20},"contentChanges":[{"text":"module vls.server.symbolGathererVisitor;\n\nimport watt.text.sink;\n\nimport ir = volta.ir;\n\nimport volta.visitor.visitor;\nimport volta.ir.location;\n\nimport vls.lsp.constants;\n\nstruct Symbol\n{\n\tname: string;\n\tloc: Location;\n\ttype: i32;  //< See the SYMBOL_ enums in vls.lsp.constants.\n\tcontainerName: string;\n\n\tfn jsonString(uri: string) string\n\t{\n\t\tss: StringSink;\n\t\tss.sinknew \"{\\\"name\\\":\\\"${name}\\\",\\\"kind\\\":${type},\\\"location\\\":${locationToJsonString(loc, uri)}\";\n\t\tif (containerName.length > 0) {\n\t\t\tmsg ~= new \", \\\"containerName\\\":\\\"${containerName}\\\"\";\n\t\t}\n\t\tmsg ~= \"}\";\n\t\treturn msg; \n\t}\n}\n\nfn locationToJsonString(loc: Location, uri: string) string\n{\n\treturn new \"{\\\"uri\\\":\\\"${uri}\\\",\\\"range\\\":${locationToRange(loc)}}\";\n}\n\nfn locationToRange(loc: Location) string\n{\n\tendLoc := loc;\n\tendLoc.column += loc.length;\n\treturn new \"{\\\"start\\\":${locationToPosition(loc)},\\\"end\\\":${locationToPosition(endLoc)}}\";\n}\n\nfn locationToPosition(loc: Location) string\n{\n\treturn new \"{\\\"line\\\":${loc.line - 1},\\\"character\\\":${loc.column - 1}}\";\n}\n\nclass SymbolGathererVisitor : NullVisitor\n{\npublic:\n\tsymbols: Symbol[];\n\nprivate:\n\tparents: string[];\n\npublic:\n\toverride fn enter(mod: ir.Module) Status\n\t{\n\t\taddSymbol(mod, mod.name.toString(), SYMBOL_MODULE);\n\t\treturn Status.Continue;\n\t}\n\n\toverride fn enter(func: ir.Function) Status\n\t{\n\t\tkind: i32;\n\t\tname := func.name;\n\t\tswitch (func.kind) with (ir.Function.Kind) {\n\t\tcase Member:\n\t\t\tkind = SYMBOL_METHOD;\n\t\t\tbreak;\n\t\tcase Constructor:\n\t\t\tkind = SYMBOL_CONSTRUCTOR;\n\t\t\tname = \"this\";\n\t\t\tbreak;\n\t\tcase Destructor:\n\t\t\tname = \"~this\";\n\t\t\tkind = SYMBOL_FUNCTION;\n\t\t\tbreak;\n\t\tdefault:\n\t\t\tif (func.type.isProperty) {\n\t\t\t\tkind = SYMBOL_PROPERTY;\n\t\t\t} else {\n\t\t\t\tkind = SYMBOL_FUNCTION;\n\t\t\t}\n\t\t\tbreak;\n\t\t}\n\t\taddSymbol(func, name, kind);\n\t\treturn Status.Continue;\n\t}\n\n\toverride fn enter(strct: ir.Struct) Status\n\t{\n\t\taddSymbol(strct, strct.name, SYMBOL_CLASS);\n\t\tparents ~= strct.name;\n\t\treturn Status.Continue;\n\t}\n\n\toverride fn leave(strct: ir.Struct) Status\n\t{\n\t\tassert(parents.length > 0);\n\t\tparents = parents[0 .. $-1];\n\t\treturn Status.Continue;\n\t}\n\n\toverride fn enter(clss: ir.Class) Status\n\t{\n\t\taddSymbol(clss, clss.name, SYMBOL_CLASS);\n\t\tparents ~= clss.name;\n\t\treturn Status.Continue;\n\t}\n\n\toverride fn leave(clss: ir.Class) Status\n\t{\n\t\tassert(parents.length > 0);\n\t\tparents = parents[0 .. $-1];\n\t\treturn Status.Continue;\n\t}\n\n\toverride fn enter(intrfc: ir._Interface) Status\n\t{\n\t\taddSymbol(intrfc, intrfc.name, SYMBOL_INTERFACE);\n\t\tparents ~= intrfc.name;\n\t\treturn Status.Continue;\n\t}\n\n\toverride fn leave(intrfc: ir._Interface) Status\n\t{\n\t\tassert(parents.length > 0);\n\t\tparents = parents[0 .. $-1];\n\t\treturn Status.Continue;\n\t}\n\n\toverride fn enter(var: ir.Variable) Status\n\t{\n\t\tkind: i32;\n\t\tswitch (var.storage) with (ir.Variable.Storage) {\n\t\tcase Field:\n\t\t\tkind = SYMBOL_FIELD;\n\t\t\tbreak;\n\t\tcase Global:\n\t\tcase Local:\n\t\t\tkind = SYMBOL_VARIABLE;\n\t\t\tbreak;\n\t\tdefault:\n\t\t\treturn Status.Continue;\n\t\t}\n\t\taddSymbol(var, var.name, kind);\n\t\treturn Status.Continue;\n\t}\n\n\toverride fn enter(enm: ir.EnumDeclaration) Status\n\t{\n\t\taddSymbol(enm, enm.name, SYMBOL_ENUM);\n\t\treturn Status.Continue;\n\t}\n\nprivate:\n\tfn addSymbol(node: ir.Node, name: string, type: i32)\n\t{\n\t\tsym: Symbol;\n\t\tsym.name = name;\n\t\tif (parents.length > 0) {\n\t\t\tsym.containerName = parents[$-1];\n\t\t}\n\t\tsym.loc = node.loc;\n\t\tsym.type = type;\n\t\tsymbols ~= sym;\n\t}\n}\n"}]}}Content-Length: 4029

{"jsonrpc":"2.0","method":"textDocument/didChange","params":{"textDocument":{"uri":"file:///Users/bernard/Code/volt/Volta/vls/src/vls/server/symbolGathererVisitor.volt","version":21},"contentChanges":[{"text":"module vls.server.symbolGathererVisitor;\n\nimport watt.text.sink;\n\nimport ir = volta.ir;\n\nimport volta.visitor.visitor;\nimport volta.ir.location;\n\nimport vls.lsp.constants;\n\nstruct Symbol\n{\n\tname: string;\n\tloc: Location;\n\ttype: i32;  //< See the SYMBOL_ enums in vls.lsp.constants.\n\tcontainerName: string;\n\n\tfn jsonString(uri: string) string\n\t{\n\t\tss: StringSink;\n\t\tss.sink(new \"{\\\"name\\\":\\\"${name}\\\",\\\"kind\\\":${type},\\\"location\\\":${locationToJsonString(loc, uri)}\";\n\t\tif (containerName.length > 0) {\n\t\t\tmsg ~= new \", \\\"containerName\\\":\\\"${containerName}\\\"\";\n\t\t}\n\t\tmsg ~= \"}\";\n\t\treturn msg; \n\t}\n}\n\nfn locationToJsonString(loc: Location, uri: string) string\n{\n\treturn new \"{\\\"uri\\\":\\\"${uri}\\\",\\\"range\\\":${locationToRange(loc)}}\";\n}\n\nfn locationToRange(loc: Location) string\n{\n\tendLoc := loc;\n\tendLoc.column += loc.length;\n\treturn new \"{\\\"start\\\":${locationToPosition(loc)},\\\"end\\\":${locationToPosition(endLoc)}}\";\n}\n\nfn locationToPosition(loc: Location) string\n{\n\treturn new \"{\\\"line\\\":${loc.line - 1},\\\"character\\\":${loc.column - 1}}\";\n}\n\nclass SymbolGathererVisitor : NullVisitor\n{\npublic:\n\tsymbols: Symbol[];\n\nprivate:\n\tparents: string[];\n\npublic:\n\toverride fn enter(mod: ir.Module) Status\n\t{\n\t\taddSymbol(mod, mod.name.toString(), SYMBOL_MODULE);\n\t\treturn Status.Continue;\n\t}\n\n\toverride fn enter(func: ir.Function) Status\n\t{\n\t\tkind: i32;\n\t\tname := func.name;\n\t\tswitch (func.kind) with (ir.Function.Kind) {\n\t\tcase Member:\n\t\t\tkind = SYMBOL_METHOD;\n\t\t\tbreak;\n\t\tcase Constructor:\n\t\t\tkind = SYMBOL_CONSTRUCTOR;\n\t\t\tname = \"this\";\n\t\t\tbreak;\n\t\tcase Destructor:\n\t\t\tname = \"~this\";\n\t\t\tkind = SYMBOL_FUNCTION;\n\t\t\tbreak;\n\t\tdefault:\n\t\t\tif (func.type.isProperty) {\n\t\t\t\tkind = SYMBOL_PROPERTY;\n\t\t\t} else {\n\t\t\t\tkind = SYMBOL_FUNCTION;\n\t\t\t}\n\t\t\tbreak;\n\t\t}\n\t\taddSymbol(func, name, kind);\n\t\treturn Status.Continue;\n\t}\n\n\toverride fn enter(strct: ir.Struct) Status\n\t{\n\t\taddSymbol(strct, strct.name, SYMBOL_CLASS);\n\t\tparents ~= strct.name;\n\t\treturn Status.Continue;\n\t}\n\n\toverride fn leave(strct: ir.Struct) Status\n\t{\n\t\tassert(parents.length > 0);\n\t\tparents = parents[0 .. $-1];\n\t\treturn Status.Continue;\n\t}\n\n\toverride fn enter(clss: ir.Class) Status\n\t{\n\t\taddSymbol(clss, clss.name, SYMBOL_CLASS);\n\t\tparents ~= clss.name;\n\t\treturn Status.Continue;\n\t}\n\n\toverride fn leave(clss: ir.Class) Status\n\t{\n\t\tassert(parents.length > 0);\n\t\tparents = parents[0 .. $-1];\n\t\treturn Status.Continue;\n\t}\n\n\toverride fn enter(intrfc: ir._Interface) Status\n\t{\n\t\taddSymbol(intrfc, intrfc.name, SYMBOL_INTERFACE);\n\t\tparents ~= intrfc.name;\n\t\treturn Status.Continue;\n\t}\n\n\toverride fn leave(intrfc: ir._Interface) Status\n\t{\n\t\tassert(parents.length > 0);\n\t\tparents = parents[0 .. $-1];\n\t\treturn Status.Continue;\n\t}\n\n\toverride fn enter(var: ir.Variable) Status\n\t{\n\t\tkind: i32;\n\t\tswitch (var.storage) with (ir.Variable.Storage) {\n\t\tcase Field:\n\t\t\tkind = SYMBOL_FIELD;\n\t\t\tbreak;\n\t\tcase Global:\n\t\tcase Local:\n\t\t\tkind = SYMBOL_VARIABLE;\n\t\t\tbreak;\n\t\tdefault:\n\t\t\treturn Status.Continue;\n\t\t}\n\t\taddSymbol(var, var.name, kind);\n\t\treturn Status.Continue;\n\t}\n\n\toverride fn enter(enm: ir.EnumDeclaration) Status\n\t{\n\t\taddSymbol(enm, enm.name, SYMBOL_ENUM);\n\t\treturn Status.Continue;\n\t}\n\nprivate:\n\tfn addSymbol(node: ir.Node, name: string, type: i32)\n\t{\n\t\tsym: Symbol;\n\t\tsym.name = name;\n\t\tif (parents.length > 0) {\n\t\t\tsym.containerName = parents[$-1];\n\t\t}\n\t\tsym.loc = node.loc;\n\t\tsym.type = type;\n\t\tsymbols ~= sym;\n\t}\n}\n"}]}}Content-Length: 220

{"jsonrpc":"2.0","id":7,"method":"textDocument/signatureHelp","params":{"textDocument":{"uri":"file:///Users/bernard/Code/volt/Volta/vls/src/vls/server/symbolGathererVisitor.volt"},"position":{"line":21,"character":10}}}